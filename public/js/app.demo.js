/*!
 * Materionic Admin Dashboard Template(https://creativemarket.com/ercanayhan?u=ercanayhan)
 * Copyright 2018 Ercan Ayhan
 * You must have a valid license purchased from creativemarket(https://creativemarket.com/ercanayhan/2682313-Materionic-Admin-Dashboard-Template?u=ercanayhan) in order to legally use the theme for your project.
 */
(function (n) { "use strict"; function i(n) { n.datasets.forEach(function (n) { n.data = n.data.map(function () { return Math.round(Samples.utils.rand(20, 100)) }) }) } function t(n) { for (var t = [], i = 0; i < n; i++)t.push(Math.round(Samples.utils.rand(20, 100))); return t } function r(t, i, r, u, f, e, o, s, h, c, l, a, v, y) { var p = document.getElementById(t).getContext("2d"), w = { title: function () { return "" }, label: function (n, t) { var i = t.labels[n.index]; return t.datasets[n.datasetIndex].data[n.index] } }, b = { type: i, data: { labels: e, datasets: [{ label: r, backgroundColor: u, borderColor: f, data: o, fill: a, steppedLine: s, pointRadius: v == undefined ? 2 : v }] }, options: { animation: { duration: y ? n.miApp.actions.isMobileDevice() ? 300 : 1e3 : 0 }, rotation: 1 * Math.PI, circumference: 1 * Math.PI, legend: { display: !1 }, maintainAspectRatio: !1, responsive: !0, title: { display: !1 }, tooltips: { displayColors: !l, mode: "index", intersect: !1, callbacks: h || l ? w : {} }, hover: { mode: "nearest", intersect: !0 }, elements: { line: { tension: c == undefined ? 1e-6 : c } }, scales: { xAxes: [{ display: h, scaleLabel: { display: !1, labelString: "Month" }, ticks: { fontColor: n.miApp.colors.white, beginAtZero: !0, maxTicksLimit: 10 }, gridLines: { display: !1, drawBorder: !1 } }], yAxes: [{ display: !1, scaleLabel: { display: !1, labelString: "Value" }, ticks: { beginAtZero: !0 }, gridLines: { display: !1, drawBorder: !1 } }] } } }; return new Chart(p, b) } function u(t, i, r, u, f) { var e = document.getElementById(i).getContext("2d"), o = { type: t, data: { labels: f, datasets: r }, options: { animation: { duration: n.miApp.actions.isMobileDevice() ? 300 : 1e3 }, legend: { display: !1 }, maintainAspectRatio: !1, responsive: !0, title: { display: !1 }, tooltips: { mode: "index", intersect: !1 }, hover: { mode: "nearest", intersect: !0 }, elements: { line: { tension: 1e-6 } }, scales: { xAxes: [{ stacked: !0, scaleLabel: { display: !1, labelString: "Month" }, display: !u, gridLines: { display: !u, drawBorder: !u } }], yAxes: [{ stacked: !0, scaleLabel: { display: !1, labelString: "Value" }, display: !u, gridLines: { display: !u, drawBorder: !u } }] } } }; return new Chart(e, o) } n.miApp.demo = { variables: { mi_weekDays: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], mi_months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], mi_months_more: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "January", "February", "March", "April", "May"] }, initThemeSettings: function () { function i(i) { for (var u = n("body"), f = u[0].classList, r = 0; r < f.length; r++)f[r].indexOf("mi-theme") != -1 && u.removeClass(f[r]); u.addClass("mi-theme-" + t[i.value.toUpperCase()]); n("[data-theme-color]").attr("content", i.value.toUpperCase()) } var t = { "#01579B": "default", "#F44336": "red", "#E91E63": "pink", "#9C27B0": "purple", "#673AB7": "deep-purple", "#3F51B5": "indigo", "#2196F3": "blue", "#03A9F4": "light-blue", "#00BCD4": "cyan", "#009688": "teal", "#4CAF50": "green", "#8BC34A": "light-green", "#CDDC39": "lime", "#FFE821": "yellow", "#FFC107": "amber", "#FF9800": "orange", "#FF5722": "deep-orange", "#795548": "brown", "#9E9E9E": "grey", "#607D8B": "blue-grey", "#000000": "black", "#FFFFFF": "white" }, r = n("#palette").kendoColorPalette({ columns: 8, tileSize: { width: 30, height: 30 }, palette: ["#01579b", "#F44336", "#E91E63", "#9C27B0", "#673AB7", "#3F51B5", "#2196F3", "#03A9F4", "#00BCD4", "#009688", "#4CAF50", "#8BC34A", "#CDDC39", "#ffe821", "#FFC107", "#FF9800", "#FF5722", "#795548", "#9E9E9E", "#607D8B", "#000000", "#FFFFFF"], change: i }).data("kendoColorPalette"); r.value("#01579B"); n(".btn-theme-settings").click(function () { n(".mi-theme-sidebar").toggleClass("open") }); n("body").click(function (t) { var i = n(t.target); (i.parents().hasClass("btn-theme-settings") || i.hasClass("btn-theme-settings") || i.parents().hasClass("mi-theme-sidebar")) && !i.hasClass("mi-icon_close") || n(".mi-theme-sidebar").removeClass("open") }); n("#mi_sidebar_dark_checkbox").click(function () { n("body").toggleClass("mi-sidebar-dark") }); n("[data-sidebar-options]").click(function (t) { var i = n(t.target).data().sidebarOptions; i == "user-card" && n(".mi-menu .mi-card-user").toggleClass("hidden"); i == "show-logo" && n(".mi-logo").toggleClass("hidden"); i == "fluid" && n("body").toggleClass("mi-sidebar-fluid"); i == "bordered" && n(".mi-menu-nav").toggleClass("mi-list-bordered") }); n("#mi_navbar_hide_input").click(function () { n("body").toggleClass("mi-navbar-hide") }); n("#mi_theme_horizantal_sizing input").click(function (t) { var i = n(t.target); n("body").removeClass("mi-sidebar-md").removeClass("mi-sidebar-sm").addClass(i.data().miSidebar) }); n("#mi_theme_vertical_sizing input").click(function (t) { var i = n(t.target); n("body").removeClass("mi-menu-md").removeClass("mi-menu-sm").addClass(i.data().miMenu) }); n(".mi-theme-sidebar .mi-card-content").height(window.innerHeight - 140) }, initAllPageFuncs: function () { Dropzone.options.frmTestUpload = { paramName: "file", maxFilesize: 3 }; n(".datepicker").kendoDatePicker({ open: function () { var n = this.dateView.calendar; n.wrapper.width(this.wrapper.width()); this.dateView.calendar.element.find(".k-content .k-link").attr("style", "min-height:24px;line-height:24px;"); Waves.attach(".k-link"); Waves.init() } }); Waves.attach(".k-i-calendar,.k-link"); Waves.init() }, initDashboardMenuChat: function () { function r() { f.scrollTop(f[0].scrollHeight) } function o() { var t = new Date, i = 0; i != t.getMinutes() && (i = t.getMinutes(), n('<div class="mi-chat-box-time">' + t.getHours() + ":" + i + "<\/div>").appendTo(n(".mi-quick-sidebar .mi-chat-box-message:last"))) } function s() { var t = n(".mi-quick-sidebar .mi-chat-box-message-input").val(); if (n.trim(t) == "") return !1; n('<div class="mi-chat-box-message mi-chat-box-message-personal">' + t + "<\/div>").appendTo(n(".mi-quick-sidebar .mi-chat-box-messages-content")).addClass("new"); o(); n(".mi-quick-sidebar .mi-chat-box-message-input").val(null); r(); setTimeout(function () { u() }, 500) } function u() { var t, u, f; if (n(".mi-quick-sidebar .mi-chat-box-message-input").val() != "") return !1; if (t = n(".active.mi-menu-item-open"), u = "", t.find('[href="../html/index.html"]').length == 0) for (f = 0; f < t.length; f++)u += "../"; else u = "../"; (t.find('[href*="tab"]').length != 0 || t.find('[href*="snippets"]').length != 0 || t.find('[href*="typography.html"]').length != 0) && (u = "../../"); t.find('[href*="app"]').length != 0 && t.find('[href*="calendar_app.html"]').length == 0 && (u = "../../../"); t.find('[href*="calendar_app"]').length != 0 && (u = "../../"); n('<div class="mi-chat-box-message mi-dots new"><span class="mi-dot"><\/span><span class="mi-dot"><\/span><span class="mi-dot"><\/span><div class="mi-chat-box-avatar"><img src="' + u + 'assets/images/users/boy.png" /><\/div><\/div>').appendTo(n(".mi-quick-sidebar .mi-chat-box-messages-content")); r(); setTimeout(function () { n(".mi-quick-sidebar .mi-chat-box-message.mi-dots").remove(); n('<div class="mi-chat-box-message new"><div class="mi-chat-box-avatar"><img src="' + u + 'assets/images/users/boy.png" /><\/div>' + (e[i] == undefined ? "I am a robot :D" : e[i]) + "<\/div>").appendTo(n(".mi-quick-sidebar .mi-chat-box-messages-content")).addClass("new"); o(); r(); i++ }, 1e3) } var f = n(".mi-quick-sidebar .mi-chat-box-messages-content"), i = 0, e = ["Hi there, I'm John and you?", "Nice to meet you", "And how are you?", "I am good, thanks", "How can i help you?", "Materionic is a nice theme.", "Amazing!!", "You're a good person", "Why do you think for theme?", "What can i do?", "Ok.", "Yo like it.", "See you later", ":)"], t; u(); t = { 13: !1, 16: !1 }; n(".mi-quick-sidebar .mi-chat-box-message-input").on("keydown", function (i) { if (i.keyCode in t && (t[i.keyCode] = !0, t[13] && !t[16])) return s(), n(".mi-quick-sidebar .mi-chat-box-message-input").attr("style", ""), !1; this.scrollHeight > 60 && (n.miApp.actions.isMobileDevice() ? n(".mi-quick-sidebar .mi-chat-box-message-input").addClass("overflow-auto") : (n(".mi-quick-sidebar .mi-chat-box-message-input").addClass("overflow-hidden"), n(".mi-quick-sidebar .mi-chat-box-message-input").niceScroll({ cursorcolor: "rgba(96, 125, 139, 0.5)", cursorwidth: "6px", cursorborder: 0, cursorborderradius: 0 }))) }).keyup(function (i) { this.value == "" && n(".mi-quick-sidebar .mi-chat-box-message-input").attr("style", ""); i.keyCode in t && (t[i.keyCode] = !1); n(".mi-quick-sidebar .mi-chat-box-message-input").attr("style", "height:" + this.scrollHeight + "px") }); n(".mi-chat-friend-list").searchable({ searchField: "#mi_sidebar_menu_chat_input", selector: ".mi-chat-item", childSelector: "span,small", show: function (n) { n.slideDown(100) }, hide: function (n) { n.slideUp(100) } }); n(".mi-quick-sidebar .mi-chat-friend-list .mi-chat-item").click(function () { n("#mi_chat_menu").toggleClass("hidden"); n("#mi_chat_box").toggleClass("hidden"); i = 0; n(".mi-chat-box-message").remove(); setTimeout(function () { u() }, 100) }); n('[data-chat-close="true"]').click(function () { n("#mi_chat_menu").toggleClass("hidden"); n("#mi_chat_box").toggleClass("hidden") }) }, initDashboard: function () { n.miApp.demo.initAllPageFuncs(); n(".knob").knob(); n("#world-map-markers").vectorMap({ map: "world_mill_en", scaleColors: ["#ffb430", "#ffb430"], normalizeFunction: "polynomial", hoverOpacity: .7, hoverColor: !1, regionStyle: { initial: { fill: n.miApp.colors.default } }, markerStyle: { initial: { r: 9, fill: "#ffb430", "fill-opacity": .9, stroke: "#fff", "stroke-width": 7, "stroke-opacity": .4 }, hover: { stroke: "#fff", "fill-opacity": 1, "stroke-width": 1.5 } }, backgroundColor: "transparent", markers: [{ latLng: [61.52, 105.31], name: "Russia" }, { latLng: [-25.27, 133.77], name: "Australia" }, { latLng: [3.2, 73.22], name: "Maldives" }, { latLng: [20.59, 78.96], name: "India" }, { latLng: [12.05, -61.75], name: "Grenada" }, { latLng: [51.43, 5.97], name: "America" }, { latLng: [35.86, 104.19], name: "China" }, { latLng: [-4.61, 55.45], name: "Seychelles" }, { latLng: [39.52, -87.12], name: "Brazil" }, { latLng: [1.35, 103.86], name: "Singapore" }, { latLng: [56.13, -106.34], name: "Dominica" }, { latLng: [26.02, 50.55], name: "Bahrain" }] }); var e = r("mi_member_chart_v2", "bar", "Stats", n.miApp.colors.cyan, n.miApp.colors.cyan, n.miApp.demo.variables.mi_weekDays, t(7), !1, !1, undefined, !1, !0, .5, !0), o = r("mi_impressions_chart_v2", "line", "Stats", n.miApp.colors.purple, n.miApp.colors.purple, n.miApp.demo.variables.mi_weekDays, t(7), !1, !1, undefined, !1, !0, .5, !0), f = document.getElementById("mi_impressions_chart_v3").getContext("2d").createLinearGradient(0, 0, 0, 150); f.addColorStop(0, "rgba(0, 188, 212, 0.40)"); f.addColorStop(1, n.miApp.colors.white); var s = r("mi_impressions_chart_v3", "line", "Stats", f, n.miApp.colors.cyan, n.miApp.demo.variables.mi_months_more, t(17), !1, !1, .1, !1, !0, .5, !0), h = r("mi_performance_chart", "bar", "Stats", n.miApp.variables.colorTransparent05, n.miApp.variables.colorTransparent05, n.miApp.demo.variables.mi_weekDays, t(7), !0, !0, undefined, !0, !0, .5, !0), c = r("mi_sales_chart", "bar", "Stats", window.chartColors.green, n.miApp.colors.green, n.miApp.demo.variables.mi_months_more, t(17), !0, !1, .1, !1, !0, .5, !0), l = r("mi_storage_chart_v2", "doughnut", "Stats", n.miApp.colors.orange, n.miApp.variables.colorTransparent05, n.miApp.demo.variables.mi_weekDays, t(7), !1, !1, undefined, !1, !0, .5, !0), a = r("mi_like_chart_v2", "line", "Stats", n.miApp.colors.blue, n.miApp.colors.blue, n.miApp.demo.variables.mi_weekDays, t(7), !0, !1, undefined, !1, !0, .5, !0), v = r("mi_device_chart", "doughnut", "Stats", [window.chartColors.blue, window.chartColors.green, window.chartColors.red, window.chartColors.orange, window.chartColors.yellow,], n.miApp.variables.colorTransparent05, ["Android", "Web", "iPhone", "Mobile", "IPad"], t(5), !1, !1, undefined, !1, !0, .5, !0), y = r("mi_news_chart_sparkline", "bar", "Stats", n.miApp.variables.colorTransparent05, n.miApp.variables.colorTransparent05, n.miApp.demo.variables.mi_weekDays, t(7), !0, !1, undefined, !0, !0, .5, !0), p = r("mi_news_chart_sparkline_2", "bar", "Stats", n.miApp.variables.colorTransparent05, n.miApp.variables.colorTransparent05, n.miApp.demo.variables.mi_weekDays, t(7), !0, !1, undefined, !0, !0, .5, !0), w = r("mi_news_chart_sparkline_3", "bar", "Stats", n.miApp.variables.colorTransparent05, n.miApp.variables.colorTransparent05, n.miApp.demo.variables.mi_weekDays, t(7), !1, !1, undefined, !0, !0, .5, !0), b = r("mi_news_chart_sparkline_4", "bar", "Stats", n.miApp.variables.colorTransparent05, n.miApp.variables.colorTransparent05, n.miApp.demo.variables.mi_weekDays, t(7), !1, !1, undefined, !0, !0, .5, !0), k = u("bar", "mi_recent_ticket_chart", [{ label: "Open", borderColor: n.miApp.colors.pink, backgroundColor: n.miApp.colors.pink, data: t(12) }, { label: "Pending", borderColor: n.miApp.colors.orange, backgroundColor: n.miApp.colors.orange, data: t(12) }, { label: "Closed", borderColor: n.miApp.colors.green, backgroundColor: n.miApp.colors.green, data: t(12) }], !0, n.miApp.demo.variables.mi_months), d = r("mi_balance_chart", "line", "Stats", n.miApp.variables.colorTransparent05, n.miApp.variables.colorTransparent05, n.miApp.demo.variables.mi_months, t(12), !1, !1, .3, !1, !0, .5, !0); n(".mi-card-header-filters .dropdown-menu a").on("click", function () { i(e.config.data); i(o.config.data); i(a.config.data); i(l.config.data); i(s.config.data); i(c.config.data); i(v.config.data); i(h.config.data); i(k.config.data); i(y.config.data); i(p.config.data); i(w.config.data); i(b.config.data); i(d.config.data); e.update(); o.update(); a.update(); l.update(); s.update(); c.update(); v.update(); h.update(); k.update(); y.update(); p.update(); w.update(); b.update(); d.update() }) }, initDashboardSales: function () { n.miApp.demo.initAllPageFuncs(); n("#world-map-markers").vectorMap({ map: "world_mill_en", scaleColors: ["#ffb430", "#ffb430"], normalizeFunction: "polynomial", hoverOpacity: .7, hoverColor: !1, regionStyle: { initial: { fill: n.miApp.colors.default } }, markerStyle: { initial: { r: 9, fill: "#ffb430", "fill-opacity": .9, stroke: "#fff", "stroke-width": 7, "stroke-opacity": .4 }, hover: { stroke: "#fff", "fill-opacity": 1, "stroke-width": 1.5 } }, backgroundColor: "transparent", markers: [{ latLng: [61.52, 105.31], name: "Russia" }, { latLng: [-25.27, 133.77], name: "Australia" }, { latLng: [3.2, 73.22], name: "Maldives" }, { latLng: [20.59, 78.96], name: "India" }, { latLng: [12.05, -61.75], name: "Grenada" }, { latLng: [51.43, 5.97], name: "America" }, { latLng: [35.86, 104.19], name: "China" }, { latLng: [-4.61, 55.45], name: "Seychelles" }, { latLng: [39.52, -87.12], name: "Brazil" }, { latLng: [1.35, 103.86], name: "Singapore" }, { latLng: [56.13, -106.34], name: "Dominica" }, { latLng: [26.02, 50.55], name: "Bahrain" }] }); var f = r("mi_revenue_chart", "line", "Stats", n.miApp.variables.colorTransparent05, n.miApp.variables.colorTransparent05, n.miApp.demo.variables.mi_months, t(12), !1, !1, undefined, !1, !0, 0, !0), e = r("mi_total_profit_chart", "line", "Stats", n.miApp.variables.colorTransparent05, n.miApp.variables.colorTransparent05, n.miApp.demo.variables.mi_months, t(12), !1, !1, undefined, !1, !0, 0, !0), o = r("mi_new_customer_chart", "line", "Stats", n.miApp.variables.colorTransparent05, n.miApp.variables.colorTransparent05, n.miApp.demo.variables.mi_months, t(12), !1, !1, undefined, !1, !0, 0, !0), s = r("mi_satisfaction_chart", "line", "Stats", n.miApp.variables.colorTransparent05, n.miApp.variables.colorTransparent05, n.miApp.demo.variables.mi_months, t(12), !1, !1, undefined, !1, !0, 0, !0), h = r("mi_top_profits_chart", "line", "Stats", n.miApp.colors.purple, n.miApp.colors.purple, n.miApp.demo.variables.mi_months, t(12), !1, !1, undefined, !1, !0, 0, !0), c = u("bar", "mi_recent_ticket_chart", [{ label: "Open", borderColor: n.miApp.colors.pink, backgroundColor: n.miApp.colors.pink, data: t(12) }, { label: "Pending", borderColor: n.miApp.colors.orange, backgroundColor: n.miApp.colors.orange, data: t(12) }, { label: "Closed", borderColor: n.miApp.colors.green, backgroundColor: n.miApp.colors.green, data: t(12) }], !0, n.miApp.demo.variables.mi_months), l = u("line", "mi_online_instore_chart", [{ label: "Online", borderColor: n.miApp.colors.cyan, backgroundColor: n.miApp.colors.cyan, data: t(12), pointRadius: 0 }, { label: "In Store", borderColor: n.miApp.colors.deepPurple, backgroundColor: n.miApp.colors.deepPurple, data: t(12), pointRadius: 0 }], !0, n.miApp.demo.variables.mi_months), a = r("mi_revenue_chart_2", "line", "Stats", "rgba(255, 193, 7,0.3)", n.miApp.colors.orange, n.miApp.demo.variables.mi_months, t(12), !1, !1, undefined, !1, !0, 0, !0), v = r("mi_total_profit_chart_2", "line", "Stats", "rgba(156, 39, 176,0.3)", n.miApp.colors.purple, n.miApp.demo.variables.mi_months, t(12), !1, !1, undefined, !1, !0, 0, !0), y = r("mi_new_customer_chart_2", "line", "Stats", "rgba(33, 150, 243,0.3)", n.miApp.colors.blue, n.miApp.demo.variables.mi_months, t(12), !1, !1, undefined, !1, !0, 0, !0), p = r("mi_satisfaction_chart_2", "line", "Stats", "rgba(76, 175, 80, 0.3)", n.miApp.colors.green, n.miApp.demo.variables.mi_months, t(12), !1, !1, undefined, !1, !0, 0, !0), w = r("mi_income_chart", "bar", "Stats", n.miApp.variables.colorTransparent05, n.miApp.variables.colorTransparent05, n.miApp.demo.variables.mi_months, t(12), !1, !1, undefined, !1, !0, .5, !0), b = r("mi_expense_chart", "line", "Stats", n.miApp.variables.colorTransparent05, n.miApp.variables.colorTransparent05, n.miApp.demo.variables.mi_months, t(12), !0, !1, undefined, !1, !0, .5, !0), k = r("mi_balance_chart", "line", "Stats", n.miApp.variables.colorTransparent05, n.miApp.variables.colorTransparent05, n.miApp.demo.variables.mi_months, t(12), !1, !1, .3, !1, !0, .5, !0); n(".mi-card-header-filters .dropdown-menu a").on("click", function () { i(f.config.data); i(e.config.data); i(o.config.data); i(s.config.data); i(a.config.data); i(v.config.data); i(y.config.data); i(p.config.data); i(h.config.data); i(c.config.data); i(l.config.data); i(w.config.data); i(b.config.data); i(k.config.data); f.update(); e.update(); o.update(); s.update(); a.update(); v.update(); y.update(); p.update(); h.update(); c.update(); l.update(); w.update(); b.update(); k.update() }) }, initDashboardServer: function () { function s() { e.data.datasets[0].data.shift(); e.config.data.datasets[0].data.push(Math.round(Samples.utils.rand(50, 100))); e.update(); var n; o ? n = setTimeout(s, 1e3) : clearTimeout(n) } var e, f, c, l; n.miApp.demo.initAllPageFuncs(); n(".knob").knob(); var a = [], o = !0; for (f = 0; f < 30; f++)a.push(f); e = r("mi_cpu_percentage_chart", "line", "Stats", n.miApp.colors.blue, n.miApp.colors.indigo, a, t(30), !1, !1, .1, !1, !0, 0, !0); s(); n("#LiveMode").on("change", function () { o = this.checked == !0; o && s() }); var v = r("mi_cpu_chart", "line", "Stats", "rgba(255, 193, 7,0.3)", n.miApp.colors.orange, n.miApp.demo.variables.mi_months, t(12), !1, !1, undefined, !1, !0, 0, !0), y = r("mi_disk_chart", "line", "Stats", "rgba(156, 39, 176,0.3)", n.miApp.colors.purple, n.miApp.demo.variables.mi_months, t(12), !1, !1, undefined, !1, !0, 0, !0), p = r("mi_memory_chart", "line", "Stats", "rgba(33, 150, 243,0.3)", n.miApp.colors.blue, n.miApp.demo.variables.mi_months, t(12), !1, !1, undefined, !1, !0, 0, !0), h = []; for (f = 1; f < 11; f++)h.push(f + ".Sec"); c = u("line", "mi_switch_interrupt_chart", [{ label: "Context Switches", borderColor: n.miApp.colors.cyan, backgroundColor: n.miApp.colors.cyan, data: t(10), pointRadius: 0 }, { label: "Interrupts", borderColor: n.miApp.colors.deepPurple, backgroundColor: n.miApp.colors.deepPurple, data: t(10), pointRadius: 0 }], !0, h); l = u("line", "mi_proc_thread_chart", [{ label: "Running Process", borderColor: n.miApp.colors.blue, backgroundColor: n.miApp.colors.blue, data: t(10), pointRadius: 0 }, { label: "Threads", borderColor: n.miApp.colors.indigo, backgroundColor: n.miApp.colors.indigo, data: t(10), pointRadius: 0 }], !0, h); n(".mi-card-header-tools .dropdown-menu a").on("click", function () { i(e.config.data); i(v.config.data); i(y.config.data); i(p.config.data); i(c.config.data); i(l.config.data); e.update(); v.update(); y.update(); p.update(); c.update(); l.update() }) }, initAppsCalendarApp: function () { n(document).ready(function () { n(".mi-event").each(function () { n(this).data("event", { title: n.trim(n(this).text()), stick: !0 }); n(this).draggable({ zIndex: 999, revert: !0, revertDuration: 0 }) }); n("#calendar").fullCalendar({ defaultDate: "2018-02-12", header: { left: "prev,next today", center: "title", right: "month,agendaWeek,agendaDay,listMonth" }, events: [{ title: "All Day Event", start: "2018-02-01", description: "Cum sociis natoque penatibus", className: "bg-purple" }, { title: "Long Event", start: "2018-02-07", end: "2018-02-10", description: "Cum sociis natoque penatibus", className: "bg-pink" }, { id: 999, title: "Repeating Event", start: "2018-02-09T16:00:00", description: "Cum sociis natoque penatibus", className: "bg-green" }, { id: 999, title: "Repeating Event", start: "2018-02-16T16:00:00", description: "Cum sociis natoque penatibus", className: "bg-indigo" }, { title: "Conference", start: "2018-02-11", end: "2018-02-13", description: "Cum sociis natoque penatibus", className: "bg-orange" }, { title: "Meeting", start: "2018-02-12T10:30:00", end: "2018-02-12T12:30:00", description: "Cum sociis natoque penatibus", className: "bg-cyan" }, { title: "Lunch", start: "2018-02-12T12:00:00", description: "Cum sociis natoque penatibus", className: "bg-red" }, { title: "Meeting", start: "2018-02-12T14:30:00", description: "Cum sociis natoque penatibus", className: "bg-purple" }, { title: "Happy Hour", start: "2018-02-12T17:30:00", description: "Cum sociis natoque penatibus", className: "bg-blue" }, { title: "Dinner", start: "2018-02-12T20:00:00", description: "Cum sociis natoque penatibus", className: "bg-pink" }, { title: "Birthday Party", start: "2018-02-13T07:00:00", description: "Cum sociis natoque penatibus", className: "bg-blue" }, { title: "Click for Google", url: "http://google.com/", start: "2018-02-28", description: "Cum sociis natoque penatibus", className: "bg-purple" }], editable: !0, droppable: !0, drop: function () { n("#drop-remove").is(":checked") && n(this).remove() }, eventAfterAllRender: function () { Waves.attach(".fc-button,.fc-event"); Waves.init(); n(".fc-header-toolbar").addClass(n("[data-mi-fc-header-color]").data("mi-fc-header-color")) }, eventRender: function (t, i, r) { r.type == "month" && (n(".popover").remove(), i.popover({ title: t.title, content: t.description == null ? t.title : t.description, trigger: n.miApp.actions.isMobileDevice() ? "click" : "hover", placement: "top", container: "body" })) } }) }) }, initAppsChatApp_ChatBox: function () { function r() { u.scrollTop(u[0].scrollHeight) } function e() { var t = new Date, i = 0; i != t.getMinutes() && (i = t.getMinutes(), n('<div class="mi-chat-box-time">' + t.getHours() + ":" + i + "<\/div>").appendTo(n("#mi_chat_box_example .mi-chat-box-message:last"))) } function s() { var t = n("#mi_chat_box_example .mi-chat-box-message-input").val(); if (n.trim(t) == "") return !1; n('<div class="mi-chat-box-message mi-chat-box-message-personal">' + t + "<\/div>").appendTo(n("#mi_chat_box_example .mi-chat-box-messages-content")).addClass("new"); e(); n("#mi_chat_box_example .mi-chat-box-message-input").val(null); r(); setTimeout(function () { o() }, 500) } function o() { if (n("#mi_chat_box_example .mi-chat-box-message-input").val() != "") return !1; n('<div class="mi-chat-box-message mi-dots new"><span class="mi-dot"><\/span><span class="mi-dot"><\/span><span class="mi-dot"><\/span><div class="mi-chat-box-avatar"><img src="../../../assets/images/users/boy.png" /><\/div><\/div>').appendTo(n("#mi_chat_box_example .mi-chat-box-messages-content")); r(); setTimeout(function () { n("#mi_chat_box_example .mi-chat-box-message.mi-dots").remove(); n('<div class="mi-chat-box-message new"><div class="mi-chat-box-avatar"><img src="../../../assets/images/users/boy.png" /><\/div>' + (f[i] == undefined ? "I am a robot :D" : f[i]) + "<\/div>").appendTo(n("#mi_chat_box_example .mi-chat-box-messages-content")).addClass("new"); e(); r(); i++ }, 1e3) } var u = n("#mi_chat_box_example .mi-chat-box-messages-content"), i = 0, f = ["Hi there, I'm John and you?", "Nice to meet you", "And how are you?", "I am good, thanks", "How can i help you?", "Materionic is a nice theme.", "Amazing!!", "You're a good person", "Why do you think for theme?", "What can i do?", "Ok.", "Yo like it.", "See you later", ":)"], t; o(); t = { 13: !1, 16: !1 }; n("#mi_chat_box_example .mi-chat-box-message-input").on("keydown", function (i) { if (i.keyCode in t && (t[i.keyCode] = !0, t[13] && !t[16])) return s(), n("#mi_chat_box_example .mi-chat-box-message-input").attr("style", ""), !1; this.scrollHeight > 60 && (n.miApp.actions.isMobileDevice() ? n("#mi_chat_box_example .mi-chat-box-message-input").addClass("overflow-auto") : (n("#mi_chat_box_example .mi-chat-box-message-input").addClass("overflow-hidden"), n("#mi_chat_box_example .mi-chat-box-message-input").niceScroll({ cursorcolor: "rgba(96, 125, 139, 0.5)", cursorwidth: "6px", cursorborder: 0, cursorborderradius: 0 }))) }).keyup(function (i) { this.value == "" && n("#mi_chat_box_example .mi-chat-box-message-input").attr("style", ""); i.keyCode in t && (t[i.keyCode] = !1); n("#mi_chat_box_example .mi-chat-box-message-input").attr("style", "height:" + this.scrollHeight + "px") }) }, initAppsChatApp_WebChat: function () { function r() { f.scrollTop(f[0].scrollHeight) } function o() { var t = new Date, i = 0; i != t.getMinutes() && (i = t.getMinutes(), n('<div class="mi-chat-box-time">' + t.getHours() + ":" + i + "<\/div>").appendTo(n("#mi_web_chat .mi-chat-box-message:last"))) } function h() { var t = n("#mi_web_chat .mi-chat-box-message-input").val(); if (n.trim(t) == "") return !1; n('<div class="mi-chat-box-message mi-chat-box-message-personal">' + t + "<\/div>").appendTo(n("#mi_web_chat .mi-chat-box-messages-content")).addClass("new"); o(); n("#mi_web_chat .mi-chat-box-message-input").val(null); r(); setTimeout(function () { s() }, 500) } function s() { if (n("#mi_web_chat .mi-chat-box-message-input").val() != "") return !1; n('<div class="mi-chat-box-message mi-dots new"><span class="mi-dot"><\/span><span class="mi-dot"><\/span><span class="mi-dot"><\/span><div class="mi-chat-box-avatar"><img src="../../../assets/images/users/boy.png" /><\/div><\/div>').appendTo(n("#mi_web_chat .mi-chat-box-messages-content")); r(); setTimeout(function () { n("#mi_web_chat .mi-chat-box-message.mi-dots").remove(); n('<div class="mi-chat-box-message new"><div class="mi-chat-box-avatar"><img src="../../../assets/images/users/boy.png" /><\/div>' + (e[i] == undefined ? "I am a robot :D" : e[i]) + "<\/div>").appendTo(n("#mi_web_chat .mi-chat-box-messages-content")).addClass("new"); o(); r(); i++ }, 1e3) } var f = n("#mi_web_chat .mi-chat-box-messages-content"), i = 0, e = ["Hi there, I'm John and you?", "Nice to meet you", "And how are you?", "I am good, thanks", "How can i help you?", "Materionic is a nice theme.", "Amazing!!", "You're a good person", "Why do you think for theme?", "What can i do?", "Ok.", "Yo like it.", "See you later", ":)"], t, u; s(); t = { 13: !1, 16: !1 }; u = null; n("#mi_web_chat .mi-chat-box-message-input").on("keydown", function (i) { if (i.keyCode in t && (t[i.keyCode] = !0, t[13] && !t[16])) return h(), n("#mi_web_chat .mi-chat-box-message-input").attr("style", ""), !1; this.scrollHeight > 60 && (n.miApp.actions.isMobileDevice() ? n("#mi_web_chat .mi-chat-box-message-input").addClass("overflow-auto") : (n("#mi_web_chat .mi-chat-box-message-input").addClass("overflow-hidden"), n("#mi_web_chat .mi-chat-box-message-input").niceScroll({ cursorcolor: "rgba(96, 125, 139, 0.5)", cursorwidth: "6px", cursorborder: 0, cursorborderradius: 0 }))) }).keyup(function (i) { this.value == "" && n("#mi_web_chat .mi-chat-box-message-input").attr("style", ""); i.keyCode in t && (t[i.keyCode] = !1); n("#mi_web_chat .mi-chat-box-message-input").attr("style", "height:" + this.scrollHeight + "px") }); n("#mi_web_chat .mi-chat-friend-list").attr("style", "height:" + (window.innerHeight - 240) + "px;"); n.miApp.actions.isMobileDevice() ? n("#mi_web_chat .mi-chat-friend-list").addClass("overflow-auto") : u = n("#mi_web_chat .mi-chat-friend-list").niceScroll({ cursorcolor: "rgba(96, 125, 139, 0.5)", cursorwidth: "6px", cursorborder: 0, cursorborderradius: 0 }); n("#mi_web_chat .mi-chat-search-item").on("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend", function () { u.show().resize() }); n("#mi_web_chat .mi-chat-friend-list").searchable({ searchField: "#mi_web_menu_chat_input", selector: ".mi-chat-item", childSelector: "span,small", show: function (n) { n.slideDown(100) }, hide: function (n) { n.slideUp(100) } }) }, initAppsContactsApp_Carded: function () { n(".mi-content-widget").searchable({ searchField: ".mi-content-widget #searchContacts", selector: ".search-item", childSelector: ".mi-visual-title,b", show: function (n) { n.slideDown(100) }, hide: function (n) { n.slideUp(100) } }) }, initAppsContactsApp_Listed: function () { n(".mi-content-widget").searchable({ searchField: ".mi-content-widget #searchContacts", selector: ".table-contacts tbody tr", childSelector: "td", show: function (n) { n.slideDown(100) }, hide: function (n) { n.slideUp(100) } }) }, initAppsContactsApp_ListedAndDetail: function () { n("#mi_contact_list").searchable({ searchField: "#searchContacts", selector: ".mi-contact-list-item", childSelector: "span,small", show: function (n) { n.slideDown(100) }, hide: function (n) { n.slideUp(100) } }); n('[data-mi-contact-detail-close="true"]').click(function () { n("#mi_contact_detail").hide(); n(".mi-contact-container").fadeIn(200); n(".mi-contact-list-item").removeClass("bg-blue"); n.miApp.variables.screenWidth >= window.innerWidth && (n("#mi_contact_column").toggle(), n("#mi_contact_detail").parent().toggleClass("full-width")) }); n(".mi-contact-list-item").click(function () { var t = n(this); n(".mi-contact-container").hide(); n("#mi_contact_detail").hide(); n("#mi_contact_detail").fadeIn(200); n.miApp.variables.screenWidth >= window.innerWidth && (n("#mi_contact_column").toggle(), n("#mi_contact_detail").parent().toggleClass("full-width")); n(".mi-content-widget-body .media-left img").attr("src", t.find(".media-left img")[0].src); n(".mi-content-widget-body .media-body span").text(t.find(".media-body span").text()); n(".mi-content-widget-body .media-body small").text(t.find(".media-body small").text()); n(".mi-contact-list-item").removeClass("bg-blue"); t.addClass("bg-blue") }) }, initAppsEmailApp: function () { function e() { n(".mi-mail-list-item [type='checkbox']").length == n(".mi-mail-list-item [type='checkbox']:checked").length ? u() : (n(".mi-mail-list-item [type='checkbox']").prop("checked", !0), n(".mi-mail-list-item").removeClass("active bg-blue-50"), n(".mi-mail-list-item").addClass("active bg-blue-50")) } function u() { n(".mi-mail-list-item [type='checkbox']").prop("checked", !1); n("#mailActionList").attr("style", "display:none"); n("#mailFilterOptions").attr("style", ""); n(".mi-mail-list-item").removeClass("active bg-blue-50") } var f, r, i, t; n("#summernote").summernote({ placeholder: "write somethings...", height: 250 }); n("#contactList").searchable({ searchField: "#searchContacts", selector: ".mi-mail-list-item", childSelector: "span,div,small", show: function (n) { n.slideDown(100) }, hide: function (n) { n.slideUp(100) } }); r = !1; i = !1; n(document).on("touchstart", ".mi-mail-list-item", function (u) { i = !0; f = setTimeout(function () { r = !0; n("#mailFilterOptions").attr("style", "display:none"); n("#mailActionList").attr("style", ""); t = !0; n(u.target).parents(".mi-mail-list-item").find("[type='checkbox']").prop("checked", !0); n(u.target).parents(".mi-mail-list-item").addClass("active bg-blue-50") }, 300) }).bind("touchend", function () { i && !r && (n(".mi-mail-list-item").find("[type='checkbox']").prop("checked", !1), n(".mi-mail-list-item").removeClass("bg-blue-50"), n(".mi-mail-container").hide(), n("#mi_mail_detail").fadeIn(200), n("#mi_mail_column").toggle(), n("#mi_mail_detail").parent().toggleClass("full-width")); r = !1; i = !1; clearTimeout(f) }); t = !1; n(document).on("click", ".mi-mail-list-item", function (r) { if (!i && (t == !1 ? (r.target.className.indexOf("mi-mail-check") == -1 ? (t = !1, u()) : (n("#mailFilterOptions").attr("style", "display:none"), n("#mailActionList").attr("style", ""), t = !0), n(".mi-mail-list-item [type='checkbox']:checked").length < 1 && n(".mi-mail-list-item").removeClass("bg-blue-50"), r.target.className.indexOf("mi-mail-check") == -1 && n(".mi-mail-list-item [type='checkbox']").prop("checked", !1), n(this).addClass("active bg-blue-50")) : t = !1, n(".mi-mail-list-item [type='checkbox']:checked").length < 1)) { var f = n(this); n(".mi-mail-container").hide(); n("#mi_mail_detail").hide(); n("#mi_mail_detail").fadeIn(200); n.miApp.variables.screenWidth >= window.innerWidth && (n("#mi_mail_column").toggle(), n("#mi_mail_detail").parent().toggleClass("full-width")) } }); n("#mi_check_all_mail").click(function () { e() }); n("#mi_reply_mail").click(function () { n("#newMailCardModal").modal("show"); n("#summernote").summernote("code", '<br/><br/><br/><hr style="display:inline-block;width:100%;">' + n("#mi_mail_content").html()); n("#summernote").summernote("focus") }); n("#mi_mail_cancel").click(function () { u() }); n('[data-mi-mail-detail-close="true"]').click(function () { n("#mi_mail_detail").hide(); n(".mi-mail-container").fadeIn(200); n(".mi-mail-list-item").removeClass("bg-blue"); n.miApp.variables.screenWidth >= window.innerWidth && (n("#mi_mail_column").toggle(), n("#mi_mail_detail").parent().toggleClass("full-width")) }); n("#customers").kendoMultiSelect({ dataTextField: "ContactName", dataValueField: "CustomerID", filter: "contains", minLength: 2, template: '<div class="media m-b-10">   <div class="media-left">       <a href="javascript:void(0);">           <img class="media-object img-circle m-t-5" src="../../../assets/images/users/#: data.ImageId #.png" width="40" height="40">       <\/a>   <\/div>   <div class="media-body">       <span class="font-bold"> #: data.ContactName #       <\/span>       <h6 class="m-t-0">#: data.Title #<\/small>   <\/div><\/div>', tagTemplate: '<img src="../../../assets/images/users/#:data.ImageId#.png" class="k-multiselect-img"/><span>#:data.ContactName#<\/span>', dataSource: { transport: { read: { dataType: "json", url: "../../../assets/data/kendo_ui_core_remote_data.json" } } } }); n("#mi_gallery").lightGallery({ thumbnail: !0, selector: "#mi_gallery [data-src]" }) }, initAppsTaskApp_MyTaskBoard: function () { n(".mi-content-widget").searchable({ searchField: ".mi-content-widget #searchTasks", selector: ".mi_task_scroller .mi-card-task", childSelector: "a,b", show: function (n) { n.slideDown(100) }, hide: function (n) { n.slideUp(100) } }); n(".mi_task_scroller").attr("style", "height:" + (window.innerHeight - 200) + "px"); n.miApp.actions.isMobileDevice() ? n(".mi_task_scroller").addClass("overflow-auto") : (n(".mi_task_scroller").addClass("overflow-hidden"), n(".mi_task_scroller").niceScroll({ cursorcolor: "rgba(96, 125, 139, 0.5)", cursorwidth: "6px", cursorborder: 0, cursorborderradius: 0 })) }, initAppsTaskApp_TaskTracking: function () { n(".mi-content-widget").searchable({ searchField: ".mi-content-widget #searchTasks", selector: ".mi_task_scroller .mi-card-task", childSelector: "a,b", show: function (n) { n.slideDown(100) }, hide: function (n) { n.slideUp(100) } }); n(".mi_task_scroller").attr("style", "height:" + (window.innerHeight - 250) + "px"); n.miApp.actions.isMobileDevice() ? n(".mi_task_scroller").addClass("overflow-auto") : (n(".mi_task_scroller").addClass("overflow-hidden"), n(".mi_task_scroller").niceScroll({ cursorcolor: "rgba(96, 125, 139, 0.5)", cursorwidth: "6px", cursorborder: 3, cursorborderradius: 3 })); n("[data-mi-scroll-content] [data-mi-tab-index]").click(function () { var t = n(this); n("[data-mi-scroll-content] [data-mi-tab-index]").removeClass("bg-light-blue"); t.addClass("bg-light-blue") }) }, initDatatables_BasicUsage: function () { n("#example").DataTable() }, initDatatables_ChildTable: function () { var t = n("#example").DataTable({ ajax: { type: "GET", url: "../../assets/data/datatables_child_table_remote_data.json", dataSrc: function (n) { return n.data } }, columns: [{ className: "mi-details", orderable: !1, data: null, defaultContent: '<a onclick="javascript:void(0)"><i class="mi col-blue">details<\/i><\/a>' }, { title: "Name", data: "name" }, { title: "Position", data: "position" }, { title: "Office", data: "office" }, { title: "Salary", data: "salary" }], order: [[1, "asc"]] }); n("#example tbody").on("click", "td.mi-details", function () { var u = n(this).closest("tr"), i = t.row(u), r; i.child.isShown() ? (i.child.hide(), u.removeClass("shown")) : (r = i.data(), i.child('<div class="mi-card"><div class="mi-card-header bg-blue"><div class="mi-title">' + r.name + '<\/div><\/div><table id="example_' + r.id + '" class="table table-bordered table-striped table-hover"><\/table><\/div>').show(), n("#example_" + r.id).DataTable({ ajax: { type: "GET", url: "../../assets/data/datatables_child_table_remote_data.json", dataSrc: function (n) { return n.data } }, columns: [{ title: "Name", data: "name" }, { title: "Position", data: "position" }, { title: "Office", data: "office" }, { title: "Salary", data: "salary" }], order: [[1, "asc"]] }), u.addClass("shown")) }) }, initDatatables_Exporting: function () { n("#example").DataTable({ data: [["Tiger Nixon", "System Architect", "Edinburgh", "5421", "2011/04/25", "$320,800"], ["Garrett Winters", "Accountant", "Tokyo", "8422", "2011/07/25", "$170,750"], ["Ashton Cox", "Junior Technical Author", "San Francisco", "1562", "2009/01/12", "$86,000"], ["Cedric Kelly", "Senior Javascript Developer", "Edinburgh", "6224", "2012/03/29", "$433,060"], ["Airi Satou", "Accountant", "Tokyo", "5407", "2008/11/28", "$162,700"], ["Brielle Williamson", "Integration Specialist", "New York", "4804", "2012/12/02", "$372,000"], ["Herrod Chandler", "Sales Assistant", "San Francisco", "9608", "2012/08/06", "$137,500"], ["Rhona Davidson", "Integration Specialist", "Tokyo", "6200", "2010/10/14", "$327,900"], ["Colleen Hurst", "Javascript Developer", "San Francisco", "2360", "2009/09/15", "$205,500"], ["Sonya Frost", "Software Engineer", "Edinburgh", "1667", "2008/12/13", "$103,600"], ["Jena Gaines", "Office Manager", "London", "3814", "2008/12/19", "$90,560"], ["Quinn Flynn", "Support Lead", "Edinburgh", "9497", "2013/03/03", "$342,000"], ["Charde Marshall", "Regional Director", "San Francisco", "6741", "2008/10/16", "$470,600"], ["Haley Kennedy", "Senior Marketing Designer", "London", "3597", "2012/12/18", "$313,500"], ["Tatyana Fitzpatrick", "Regional Director", "London", "1965", "2010/03/17", "$385,750"], ["Michael Silva", "Marketing Designer", "London", "1581", "2012/11/27", "$198,500"], ["Paul Byrd", "Chief Financial Officer (CFO)", "New York", "3059", "2010/06/09", "$725,000"], ["Gloria Little", "Systems Administrator", "New York", "1721", "2009/04/10", "$237,500"], ["Bradley Greer", "Software Engineer", "London", "2558", "2012/10/13", "$132,000"], ["Dai Rios", "Personnel Lead", "Edinburgh", "2290", "2012/09/26", "$217,500"], ["Jenette Caldwell", "Development Lead", "New York", "1937", "2011/09/03", "$345,000"], ["Yuri Berry", "Chief Marketing Officer (CMO)", "New York", "6154", "2009/06/25", "$675,000"], ["Caesar Vance", "Pre-Sales Support", "New York", "8330", "2011/12/12", "$106,450"], ["Doris Wilder", "Sales Assistant", "Sidney", "3023", "2010/09/20", "$85,600"], ["Angelica Ramos", "Chief Executive Officer (CEO)", "London", "5797", "2009/10/09", "$1,200,000"], ["Gavin Joyce", "Developer", "Edinburgh", "8822", "2010/12/22", "$92,575"], ["Jennifer Chang", "Regional Director", "Singapore", "9239", "2010/11/14", "$357,650"], ["Brenden Wagner", "Software Engineer", "San Francisco", "1314", "2011/06/07", "$206,850"], ["Fiona Green", "Chief Operating Officer (COO)", "San Francisco", "2947", "2010/03/11", "$850,000"], ["Shou Itou", "Regional Marketing", "Tokyo", "8899", "2011/08/14", "$163,000"], ["Michelle House", "Integration Specialist", "Sidney", "2769", "2011/06/02", "$95,400"], ["Suki Burks", "Developer", "London", "6832", "2009/10/22", "$114,500"], ["Prescott Bartlett", "Technical Author", "London", "3606", "2011/05/07", "$145,000"], ["Gavin Cortez", "Team Leader", "San Francisco", "2860", "2008/10/26", "$235,500"], ["Martena Mccray", "Post-Sales support", "Edinburgh", "8240", "2011/03/09", "$324,050"], ["Unity Butler", "Marketing Designer", "San Francisco", "5384", "2009/12/09", "$85,675"]], columns: [{ title: "Name" }, { title: "Position" }, { title: "Office" }, { title: "Extn." }, { title: "Start date" }, { title: "Salary" }], dom: '"<"col-md-12 padding-10"B>rt<"row padding-5"<"col-md-2"i><"col-md-2 no-pad"l><"col-md-3"><"col-md-5"p>>', buttons: ["copy", "csv", "excel", "pdf", "print"], initComplete: function () { n(".dt-button").addClass("bg-indigo"); Waves.attach(".dt-button"); Waves.init() } }) }, initDatatables_LocalData: function () { n("#example").DataTable({ data: [["Tiger Nixon", "System Architect", "Edinburgh", "5421", "2011/04/25", "$320,800"], ["Garrett Winters", "Accountant", "Tokyo", "8422", "2011/07/25", "$170,750"], ["Ashton Cox", "Junior Technical Author", "San Francisco", "1562", "2009/01/12", "$86,000"], ["Cedric Kelly", "Senior Javascript Developer", "Edinburgh", "6224", "2012/03/29", "$433,060"], ["Airi Satou", "Accountant", "Tokyo", "5407", "2008/11/28", "$162,700"], ["Brielle Williamson", "Integration Specialist", "New York", "4804", "2012/12/02", "$372,000"], ["Herrod Chandler", "Sales Assistant", "San Francisco", "9608", "2012/08/06", "$137,500"], ["Rhona Davidson", "Integration Specialist", "Tokyo", "6200", "2010/10/14", "$327,900"], ["Colleen Hurst", "Javascript Developer", "San Francisco", "2360", "2009/09/15", "$205,500"], ["Sonya Frost", "Software Engineer", "Edinburgh", "1667", "2008/12/13", "$103,600"], ["Jena Gaines", "Office Manager", "London", "3814", "2008/12/19", "$90,560"], ["Quinn Flynn", "Support Lead", "Edinburgh", "9497", "2013/03/03", "$342,000"], ["Charde Marshall", "Regional Director", "San Francisco", "6741", "2008/10/16", "$470,600"], ["Haley Kennedy", "Senior Marketing Designer", "London", "3597", "2012/12/18", "$313,500"], ["Tatyana Fitzpatrick", "Regional Director", "London", "1965", "2010/03/17", "$385,750"], ["Michael Silva", "Marketing Designer", "London", "1581", "2012/11/27", "$198,500"], ["Paul Byrd", "Chief Financial Officer (CFO)", "New York", "3059", "2010/06/09", "$725,000"], ["Gloria Little", "Systems Administrator", "New York", "1721", "2009/04/10", "$237,500"], ["Bradley Greer", "Software Engineer", "London", "2558", "2012/10/13", "$132,000"], ["Dai Rios", "Personnel Lead", "Edinburgh", "2290", "2012/09/26", "$217,500"], ["Jenette Caldwell", "Development Lead", "New York", "1937", "2011/09/03", "$345,000"], ["Yuri Berry", "Chief Marketing Officer (CMO)", "New York", "6154", "2009/06/25", "$675,000"], ["Caesar Vance", "Pre-Sales Support", "New York", "8330", "2011/12/12", "$106,450"], ["Doris Wilder", "Sales Assistant", "Sidney", "3023", "2010/09/20", "$85,600"], ["Angelica Ramos", "Chief Executive Officer (CEO)", "London", "5797", "2009/10/09", "$1,200,000"], ["Gavin Joyce", "Developer", "Edinburgh", "8822", "2010/12/22", "$92,575"], ["Jennifer Chang", "Regional Director", "Singapore", "9239", "2010/11/14", "$357,650"], ["Brenden Wagner", "Software Engineer", "San Francisco", "1314", "2011/06/07", "$206,850"], ["Fiona Green", "Chief Operating Officer (COO)", "San Francisco", "2947", "2010/03/11", "$850,000"], ["Shou Itou", "Regional Marketing", "Tokyo", "8899", "2011/08/14", "$163,000"], ["Michelle House", "Integration Specialist", "Sidney", "2769", "2011/06/02", "$95,400"], ["Suki Burks", "Developer", "London", "6832", "2009/10/22", "$114,500"], ["Prescott Bartlett", "Technical Author", "London", "3606", "2011/05/07", "$145,000"], ["Gavin Cortez", "Team Leader", "San Francisco", "2860", "2008/10/26", "$235,500"], ["Martena Mccray", "Post-Sales support", "Edinburgh", "8240", "2011/03/09", "$324,050"], ["Unity Butler", "Marketing Designer", "San Francisco", "5384", "2009/12/09", "$85,675"]], columns: [{ title: "Name" }, { title: "Position" }, { title: "Office" }, { title: "Extn." }, { title: "Start date" }, { title: "Salary" }] }) }, initDatatables_RemoteData: function () { n("#example").DataTable({ ajax: "../../assets/data/datatables_remote_data.json" }) }, initCommonControls_Autocomplete: function () { n("#countries").kendoAutoComplete({ dataSource: ["Albania", "Andorra", "Armenia", "Austria", "Azerbaijan", "Belarus", "Belgium", "Bosnia & Herzegovina", "Bulgaria", "Croatia", "Cyprus", "Czech Republic", "Denmark", "Estonia", "Finland", "France", "Georgia", "Germany", "Greece", "Hungary", "Iceland", "Ireland", "Italy", "Kosovo", "Latvia", "Liechtenstein", "Lithuania", "Luxembourg", "Macedonia", "Malta", "Moldova", "Monaco", "Montenegro", "Netherlands", "Norway", "Poland", "Portugal", "Romania", "Russia", "San Marino", "Serbia", "Slovakia", "Slovenia", "Spain", "Sweden", "Switzerland", "Turkey", "Ukraine", "United Kingdom", "Vatican City"], filter: "startswith", placeholder: "Select country...", separator: ", " }); n("#customers").kendoAutoComplete({ dataTextField: "ContactName", dataValueField: "CustomerID", filter: "contains", minLength: 2, template: '<div class="media m-b-10">   <div class="media-left">       <a href="javascript:void(0);">           <img class="media-object img-circle m-t-5" src="../../assets/images/users/#: data.ImageId #.png" width="40" height="40">       <\/a>   <\/div>   <div class="media-body">       <span class="font-bold"> #: data.ContactName #       <\/span>       <h6 class="m-t-0">#: data.Title #<\/small>   <\/div><\/div>', dataSource: { transport: { read: { dataType: "json", url: "../../assets/data/kendo_ui_core_remote_data.json" } } } }) }, initCommonControls_Autosize: function () { n(function () { autosize(n("textarea.mi-auto-size")) }) }, initCommonControls_Calendar: function () { n("#calendar").kendoCalendar(); n("#calendar2").kendoCalendar({ selectable: "multiple", disableDates: ["we", "sa"] }) }, initCommonControls_Colorpicker: function () { function t(t) { n(".mi-content-header .header").attr("style", "background-color:" + t.value + "!important") } n("#example_palette").kendoColorPalette({ columns: 7, tileSize: { width: "100%", height: "100%" }, palette: ["#f0d0c9", "#e2a293", "#d4735e", "#65281a", "#eddfda", "#dcc0b6", "#cba092", "#7b4b3a", "#fcecd5", "#f9d9ab", "#f6c781", "#c87d0e", "#e1dca5", "#d0c974", "#a29a36", "#514d1b", "#c6d9f0", "#8db3e2", "#548dd4", "#17365d", "#a355b1"], change: t }); n("#picker").kendoColorPicker({ value: "#ffffff", buttons: !1, select: t }); Waves.attach(".k-item"); Waves.init() }, initCommonControls_Combobox: function () { n("#countries").kendoComboBox({ dataSource: ["Albania", "Andorra", "Armenia", "Austria", "Azerbaijan", "Belarus", "Belgium", "Bosnia & Herzegovina", "Bulgaria", "Croatia", "Cyprus", "Czech Republic", "Denmark", "Estonia", "Finland", "France", "Georgia", "Germany", "Greece", "Hungary", "Iceland", "Ireland", "Italy", "Kosovo", "Latvia", "Liechtenstein", "Lithuania", "Luxembourg", "Macedonia", "Malta", "Moldova", "Monaco", "Montenegro", "Netherlands", "Norway", "Poland", "Portugal", "Romania", "Russia", "San Marino", "Serbia", "Slovakia", "Slovenia", "Spain", "Sweden", "Switzerland", "Turkey", "Ukraine", "United Kingdom", "Vatican City"], filter: "startswith", placeholder: "Select country..." }); n("#customers").kendoComboBox({ dataTextField: "ContactName", dataValueField: "CustomerID", filter: "contains", minLength: 2, template: '<div class="media m-b-10">   <div class="media-left">       <a href="javascript:void(0);">           <img class="media-object img-circle m-t-5" src="../../assets/images/users/#: data.ImageId #.png" width="40" height="40">       <\/a>   <\/div>   <div class="media-body">       <span class="font-bold"> #: data.ContactName #       <\/span>       <h6 class="m-t-0">#: data.Title #<\/small>   <\/div><\/div>', dataSource: { transport: { read: { dataType: "json", url: "../../assets/data/kendo_ui_core_remote_data.json" } } } }) }, initCommonControls_Datepicker: function () { n("#datepicker").kendoDatePicker(); n("#monthpicker").kendoDatePicker({ start: "year", depth: "year", format: "MMMM yyyy", dateInput: !0 }) }, initCommonControls_DateTimePicker: function () { n("#datetimepicker").kendoDateTimePicker({ value: new Date, dateInput: !0 }) }, initCommonControls_DropDownList: function () { n("#countries").kendoDropDownList({ dataSource: ["Albania", "Andorra", "Armenia", "Austria", "Azerbaijan", "Belarus", "Belgium", "Bosnia & Herzegovina", "Bulgaria", "Croatia", "Cyprus", "Czech Republic", "Denmark", "Estonia", "Finland", "France", "Georgia", "Germany", "Greece", "Hungary", "Iceland", "Ireland", "Italy", "Kosovo", "Latvia", "Liechtenstein", "Lithuania", "Luxembourg", "Macedonia", "Malta", "Moldova", "Monaco", "Montenegro", "Netherlands", "Norway", "Poland", "Portugal", "Romania", "Russia", "San Marino", "Serbia", "Slovakia", "Slovenia", "Spain", "Sweden", "Switzerland", "Turkey", "Ukraine", "United Kingdom", "Vatican City"], filter: "startswith", placeholder: "Select country..." }); n("#customers").kendoDropDownList({ dataTextField: "ContactName", dataValueField: "CustomerID", filter: "contains", minLength: 2, template: '<div class="media m-b-10">   <div class="media-left">       <a href="javascript:void(0);">           <img class="media-object img-circle m-t-5" src="../../assets/images/users/#: data.ImageId #.png" width="40" height="40">       <\/a>   <\/div>   <div class="media-body">       <span class="font-bold"> #: data.ContactName #       <\/span>       <h6 class="m-t-0">#: data.Title #<\/small>   <\/div><\/div>', dataSource: { transport: { read: { dataType: "json", url: "../../assets/data/kendo_ui_core_remote_data.json" } } } }) }, initCommonControls_Summernote: function () { n("#summernote").summernote(); n("#summernote2").summernote({ lang: "de-DE" }) }, initCommonControls_ListView: function () { var t = new kendo.data.DataSource({ transport: { read: { dataType: "json", url: "../../assets/data/kendo_ui_core_remote_data.json" } }, pageSize: 21 }); n("#pager").kendoPager({ dataSource: t }); n("#listView").kendoListView({ dataSource: t, template: '<div class="col-md-4 padding-10 waves-effect">  <div class="media"> <div class="media-left">       <a href="javascript:void(0);">           <img class="media-object img-circle m-t--5" src="../../assets/images/users/#: data.ImageId #.png" width="40" height="40">       <\/a>   <\/div>   <div class="media-body">       <span class="font-bold"> #: data.ContactName #       <\/span>     <br/>  <small class="m-t-0">#: data.Title #<\/small>   <\/div><\/div><\/div>' }) }, initCommonControls_Inputmask: function () { var t = n(".mask"); t.find(".credit-card").inputmask("9999 9999 9999 9999", { placeholder: "____ ____ ____ ____" }); t.find(".phone").inputmask("+99 (999) 999-99-99", { placeholder: "+__ (___) ___-__-__" }); t.find(".product-key").inputmask("*****-***-*******-*****", { placeholder: "____-____-____-____" }); t.find(".ip").inputmask("999.999.999.999", { placeholder: "___.___.___.___" }); t.find(".email").inputmask({ alias: "email" }); t.find(".currency").inputmask("99,99 $", { placeholder: "__,__ $" }); t.find(".date").inputmask("dd/mm/yyyy", { placeholder: "__/__/____" }); t.find(".datetime").inputmask("d/m/y h:s", { placeholder: "__/__/____ __:__", alias: "datetime", hourFormat: "24" }); t.find(".time12").inputmask("hh:mm t", { placeholder: "__:__ _m", alias: "time12", hourFormat: "12" }); t.find(".time24").inputmask("hh:mm", { placeholder: "__:__", alias: "time24", hourFormat: "24" }) }, initCommonControls_MultiSelect: function () { n("#countries").kendoMultiSelect({ dataSource: ["Albania", "Andorra", "Armenia", "Austria", "Azerbaijan", "Belarus", "Belgium", "Bosnia & Herzegovina", "Bulgaria", "Croatia", "Cyprus", "Czech Republic", "Denmark", "Estonia", "Finland", "France", "Georgia", "Germany", "Greece", "Hungary", "Iceland", "Ireland", "Italy", "Kosovo", "Latvia", "Liechtenstein", "Lithuania", "Luxembourg", "Macedonia", "Malta", "Moldova", "Monaco", "Montenegro", "Netherlands", "Norway", "Poland", "Portugal", "Romania", "Russia", "San Marino", "Serbia", "Slovakia", "Slovenia", "Spain", "Sweden", "Switzerland", "Turkey", "Ukraine", "United Kingdom", "Vatican City"], filter: "startswith", placeholder: "Select country..." }); n("#customers").kendoMultiSelect({ dataTextField: "ContactName", dataValueField: "CustomerID", filter: "contains", minLength: 2, template: '<div class="media m-b-10">   <div class="media-left">       <a href="javascript:void(0);">           <img class="media-object img-circle m-t-5" src="../../assets/images/users/#: data.ImageId #.png" width="40" height="40">       <\/a>   <\/div>   <div class="media-body">       <span class="font-bold"> #: data.ContactName #       <\/span>       <h6 class="m-t-0">#: data.Title #<\/small>   <\/div><\/div>', tagTemplate: '<img src="../../assets/images/users/#:data.ImageId#.png" class="k-multiselect-img"/><span>#:data.ContactName#<\/span>', dataSource: { transport: { read: { dataType: "json", url: "../../assets/data/kendo_ui_core_remote_data.json" } } } }) }, initCommonControls_Spinner: function () { n(function () { n("#customize-spinner").spinner("changed", function (t, i, r) { n("#old-val").text(r); n("#new-val").text(i) }) }) }, initCommonControls_Splitter: function () { n("#vertical").kendoSplitter({ orientation: "vertical", panes: [{ collapsible: !1 }, { collapsible: !1, size: "100px" }, { collapsible: !1, resizable: !1, size: "100px" }] }); n("#horizontal").kendoSplitter({ panes: [{ collapsible: !0 }, { collapsible: !1 }, { collapsible: !0 }] }) }, initCommonControls_TimePicker: function () { n("#timepicker").kendoTimePicker({ dateInput: !0 }) }, initCommonControls_TooltipPopover: function () { n('[data-toggle="tooltip"]').tooltip({ container: "body" }); n('[data-toggle="popover"]').popover() }, initCommonControls_Upload: function () { Dropzone.options.frmUpload = { paramName: "file", maxFilesize: 3 } }, initCommonControls_Window: function () { function r() { t.fadeIn() } var i = n("#window"), t = n("#undo"); t.click(function () { i.data("kendoWindow").open(); t.fadeOut() }); i.kendoWindow({ width: 600, height: 400, draggable: !1, pinned: !1, title: "Basic Usage", modal: !0, actions: ["Maximize", "Close"], close: r, maximize: function () { n("#window").parent().css("height", "100%") } }).data("kendoWindow").center().open() }, initCards_Wizard: function () { n(document).ready(function () { n("#example-basic").steps({ cssClass: "wizard", headerTag: "h3", bodyTag: "section", autoFocus: !0 }); var t = n("#example-form"); n.validator.addMethod("productKey", function (n) { return n.match(/^\d\d\d\d\d?-\d\d\d?-\d\d\d\d\d\d\d?-\d\d\d\d\d$/) }, "Please enter your product key in the format XXXXX-XXX-XXXXXXX-XXXXX."); t.validate({ rules: { title: { required: !0, minlength: 2, maxlength: 4 }, productKey: { required: !0, productKey: !0 } }, highlight: function (t) { n(t).parents(".mi-input").addClass("mi-error") }, unhighlight: function (t) { n(t).parents(".mi-input").removeClass("mi-error") }, errorPlacement: function (t, i) { n(i).parents(".input-group")[0] != undefined ? n(i).parents(".input-group").append(t) : n(i).parents(".form-group").append(t) } }); t.steps({ headerTag: "h3", bodyTag: "section", onStepChanging: function (n, i, r) { return i > r ? !0 : (t.validate().settings.ignore = ":disabled,:hidden", t.valid()) }, onFinishing: function () { return t.validate().settings.ignore = ":disabled", t.valid() }, onFinished: function () { alert("Submitted!") } }); n("#example-vertical").steps({ headerTag: "h3", bodyTag: "section", stepsOrientation: "vertical" }); Waves.attach(".wizard > .steps a,.wizard > .actions a"); Waves.init() }) }, initCards_VisualCards: function () { n.miApp.demo.initAllPageFuncs(); var i = r("mi_chart_sparkline", "bar", "Stats", n.miApp.variables.colorTransparent05, n.miApp.variables.colorTransparent05, n.miApp.demo.variables.mi_weekDays, t(7), !0, !1, undefined, !0, !0, .5, !0), u = r("mi_chart_sparkline_2", "line", "Stats", n.miApp.variables.colorTransparent05, n.miApp.variables.colorTransparent05, n.miApp.demo.variables.mi_weekDays, t(7), !0, !1, undefined, !0, !0, .5, !0), f = r("mi_chart_sparkline_3", "line", "Stats", n.miApp.variables.colorTransparent05, n.miApp.variables.colorTransparent05, n.miApp.demo.variables.mi_weekDays, t(7), !1, !1, undefined, !0, !0, .5, !0), e = r("mi_chart_sparkline_4", "doughnut", "Stats", n.miApp.variables.colorTransparent05, n.miApp.variables.colorTransparent05, n.miApp.demo.variables.mi_weekDays, t(7), !1, !1, undefined, !0, !0, .5, !0) }, initCards_Validation: function () { n(function () { n.validator.addMethod("productKey", function (n) { return n.match(/^\d\d\d\d\d?-\d\d\d?-\d\d\d\d\d\d\d?-\d\d\d\d\d$/) }, "Please enter your product key in the format XXXXX-XXX-XXXXXXX-XXXXX."); n("#validationCard").validate({ rules: { title: { required: !0, minlength: 2, maxlength: 4 }, productKey: { required: !0, productKey: !0 } }, highlight: function (t) { n(t).parents(".mi-input").addClass("mi-error") }, unhighlight: function (t) { n(t).parents(".mi-input").removeClass("mi-error") }, errorPlacement: function (t, i) { n(i).parents(".input-group")[0] != undefined ? n(i).parents(".input-group").append(t) : n(i).parents(".form-group").append(t) } }) }) }, initCharts_Bar_Vertical: function () { var r = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], t = Chart.helpers.color, n = { labels: ["January", "February", "March", "April", "May", "June", "July"], datasets: [{ label: "Dataset 1", backgroundColor: t(window.chartColors.red).alpha(.5).rgbString(), borderColor: window.chartColors.red, borderWidth: 1, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }, { label: "Dataset 2", backgroundColor: t(window.chartColors.blue).alpha(.5).rgbString(), borderColor: window.chartColors.blue, borderWidth: 1, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }] }, i; window.onload = function () { var t = document.getElementById("canvas").getContext("2d"); window.myBar = new Chart(t, { type: "bar", data: n, options: { maintainAspectRatio: !1, responsive: !0, legend: { position: "top" }, title: { display: !0, text: "Chart.js Bar Chart" } } }) }; document.getElementById("randomizeData").addEventListener("click", function () { var t = Math.random() < .2 ? !0 : !1; n.datasets.forEach(function (n) { n.data = n.data.map(function () { return t ? 0 : randomScalingFactor() }) }); window.myBar.update() }); i = Object.keys(window.chartColors); document.getElementById("addDataset").addEventListener("click", function () { for (var e = i[n.datasets.length % i.length], r = window.chartColors[e], u = { label: "Dataset " + n.datasets.length, backgroundColor: t(r).alpha(.5).rgbString(), borderColor: r, borderWidth: 1, data: [] }, f = 0; f < n.labels.length; ++f)u.data.push(randomScalingFactor()); n.datasets.push(u); window.myBar.update() }); document.getElementById("addData").addEventListener("click", function () { var i, t; if (n.datasets.length > 0) { for (i = r[n.labels.length % r.length], n.labels.push(i), t = 0; t < n.datasets.length; ++t)n.datasets[t].data.push(randomScalingFactor()); window.myBar.update() } }); document.getElementById("removeDataset").addEventListener("click", function () { n.datasets.splice(0, 1); window.myBar.update() }); document.getElementById("removeData").addEventListener("click", function () { n.labels.splice(-1, 1); n.datasets.forEach(function (n) { n.data.pop() }); window.myBar.update() }) }, initCharts_Bar_Horizontal: function () { var r = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], t = Chart.helpers.color, n = { labels: ["January", "February", "March", "April", "May", "June", "July"], datasets: [{ label: "Dataset 1", backgroundColor: t(window.chartColors.red).alpha(.5).rgbString(), borderColor: window.chartColors.red, borderWidth: 1, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }, { label: "Dataset 2", backgroundColor: t(window.chartColors.blue).alpha(.5).rgbString(), borderColor: window.chartColors.blue, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }] }, i; window.onload = function () { var t = document.getElementById("canvas").getContext("2d"); window.myHorizontalBar = new Chart(t, { type: "horizontalBar", data: n, options: { maintainAspectRatio: !1, elements: { rectangle: { borderWidth: 2 } }, responsive: !0, legend: { position: "right" }, title: { display: !0, text: "Chart.js Horizontal Bar Chart" } } }) }; document.getElementById("randomizeData").addEventListener("click", function () { var t = Math.random() < .2 ? !0 : !1; n.datasets.forEach(function (n) { n.data = n.data.map(function () { return t ? 0 : randomScalingFactor() }) }); window.myHorizontalBar.update() }); i = Object.keys(window.chartColors); document.getElementById("addDataset").addEventListener("click", function () { for (var e = i[n.datasets.length % i.length], r = window.chartColors[e], u = { label: "Dataset " + n.datasets.length, backgroundColor: t(r).alpha(.5).rgbString(), borderColor: r, data: [] }, f = 0; f < n.labels.length; ++f)u.data.push(randomScalingFactor()); n.datasets.push(u); window.myHorizontalBar.update() }); document.getElementById("addData").addEventListener("click", function () { var i, t; if (n.datasets.length > 0) { for (i = r[n.labels.length % r.length], n.labels.push(i), t = 0; t < n.datasets.length; ++t)n.datasets[t].data.push(randomScalingFactor()); window.myHorizontalBar.update() } }); document.getElementById("removeDataset").addEventListener("click", function () { n.datasets.splice(0, 1); window.myHorizontalBar.update() }); document.getElementById("removeData").addEventListener("click", function () { n.labels.splice(-1, 1); n.datasets.forEach(function (n) { n.data.pop() }); window.myHorizontalBar.update() }) }, initCharts_Bar_MultiAxis: function () { var n = { labels: ["January", "February", "March", "April", "May", "June", "July"], datasets: [{ label: "Dataset 1", backgroundColor: [window.chartColors.red, window.chartColors.orange, window.chartColors.yellow, window.chartColors.green, window.chartColors.blue, window.chartColors.purple, window.chartColors.red], yAxisID: "y-axis-1", data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }, { label: "Dataset 2", backgroundColor: window.chartColors.grey, yAxisID: "y-axis-2", data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }] }; window.onload = function () { var t = document.getElementById("canvas").getContext("2d"); window.myBar = new Chart(t, { type: "bar", data: n, options: { maintainAspectRatio: !1, responsive: !0, title: { display: !0, text: "Chart.js Bar Chart - Multi Axis" }, tooltips: { mode: "index", intersect: !0 }, scales: { yAxes: [{ type: "linear", display: !0, position: "left", id: "y-axis-1" }, { type: "linear", display: !0, position: "right", id: "y-axis-2", gridLines: { drawOnChartArea: !1 } }] } } }) }; document.getElementById("randomizeData").addEventListener("click", function () { n.datasets.forEach(function (n) { n.data = n.data.map(function () { return randomScalingFactor() }) }); window.myBar.update() }) }, initCharts_Bar_Stacked: function () { var n = { labels: ["January", "February", "March", "April", "May", "June", "July"], datasets: [{ label: "Dataset 1", backgroundColor: window.chartColors.red, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }, { label: "Dataset 2", backgroundColor: window.chartColors.blue, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }, { label: "Dataset 3", backgroundColor: window.chartColors.green, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }] }; window.onload = function () { var t = document.getElementById("canvas").getContext("2d"); window.myBar = new Chart(t, { type: "bar", data: n, options: { maintainAspectRatio: !1, title: { display: !0, text: "Chart.js Bar Chart - Stacked" }, tooltips: { mode: "index", intersect: !1 }, responsive: !0, scales: { xAxes: [{ stacked: !0 }], yAxes: [{ stacked: !0 }] } } }) }; document.getElementById("randomizeData").addEventListener("click", function () { n.datasets.forEach(function (n) { n.data = n.data.map(function () { return randomScalingFactor() }) }); window.myBar.update() }) }, initCharts_Bar_StackedGroups: function () { var n = { labels: ["January", "February", "March", "April", "May", "June", "July"], datasets: [{ label: "Dataset 1", backgroundColor: window.chartColors.red, stack: "Stack 0", data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }, { label: "Dataset 2", backgroundColor: window.chartColors.blue, stack: "Stack 0", data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }, { label: "Dataset 3", backgroundColor: window.chartColors.green, stack: "Stack 1", data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }] }; window.onload = function () { var t = document.getElementById("canvas").getContext("2d"); window.myBar = new Chart(t, { type: "bar", data: n, options: { maintainAspectRatio: !1, title: { display: !0, text: "Chart.js Bar Chart - Stacked" }, tooltips: { mode: "index", intersect: !1 }, responsive: !0, scales: { xAxes: [{ stacked: !0 }], yAxes: [{ stacked: !0 }] } } }) }; document.getElementById("randomizeData").addEventListener("click", function () { n.datasets.forEach(function (n) { n.data = n.data.map(function () { return randomScalingFactor() }) }); window.myBar.update() }) }, initCharts_Line_Basic: function () { var i = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], n = { type: "line", data: { labels: ["January", "February", "March", "April", "May", "June", "July"], datasets: [{ label: "My First dataset", backgroundColor: window.chartColors.red, borderColor: window.chartColors.red, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()], fill: !1 }, { label: "My Second dataset", fill: !1, backgroundColor: window.chartColors.blue, borderColor: window.chartColors.blue, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }] }, options: { maintainAspectRatio: !1, responsive: !0, title: { display: !0, text: "Chart.js Line Chart" }, tooltips: { mode: "index", intersect: !1 }, hover: { mode: "nearest", intersect: !0 }, scales: { xAxes: [{ display: !0, scaleLabel: { display: !0, labelString: "Month" } }], yAxes: [{ display: !0, scaleLabel: { display: !0, labelString: "Value" } }] } } }, t; window.onload = function () { var t = document.getElementById("canvas").getContext("2d"); window.myLine = new Chart(t, n) }; document.getElementById("randomizeData").addEventListener("click", function () { n.data.datasets.forEach(function (n) { n.data = n.data.map(function () { return randomScalingFactor() }) }); window.myLine.update() }); t = Object.keys(window.chartColors); document.getElementById("addDataset").addEventListener("click", function () { for (var f = t[n.data.datasets.length % t.length], i = window.chartColors[f], r = { label: "Dataset " + n.data.datasets.length, backgroundColor: i, borderColor: i, data: [], fill: !1 }, u = 0; u < n.data.labels.length; ++u)r.data.push(randomScalingFactor()); n.data.datasets.push(r); window.myLine.update() }); document.getElementById("addData").addEventListener("click", function () { if (n.data.datasets.length > 0) { var t = i[n.data.labels.length % i.length]; n.data.labels.push(t); n.data.datasets.forEach(function (n) { n.data.push(randomScalingFactor()) }); window.myLine.update() } }); document.getElementById("removeDataset").addEventListener("click", function () { n.data.datasets.splice(0, 1); window.myLine.update() }); document.getElementById("removeData").addEventListener("click", function () { n.data.labels.splice(-1, 1); n.data.datasets.forEach(function (n) { n.data.pop() }); window.myLine.update() }) }, initCharts_Line_Interpolation: function () { var t = function () { return Math.round(Math.random() * 100) }, n = [0, 20, 20, 60, 60, 120, NaN, 180, 120, 125, 105, 110, 170], i = { type: "line", data: { labels: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], datasets: [{ label: "Cubic interpolation (monotone)", data: n, borderColor: window.chartColors.red, backgroundColor: "rgba(0, 0, 0, 0)", fill: !1, cubicInterpolationMode: "monotone" }, { label: "Cubic interpolation (default)", data: n, borderColor: window.chartColors.blue, backgroundColor: "rgba(0, 0, 0, 0)", fill: !1 }, { label: "Linear interpolation", data: n, borderColor: window.chartColors.green, backgroundColor: "rgba(0, 0, 0, 0)", fill: !1, lineTension: 0 }] }, options: { maintainAspectRatio: !1, responsive: !0, title: { display: !0, text: "Chart.js Line Chart - Cubic interpolation mode" }, tooltips: { mode: "index" }, scales: { xAxes: [{ display: !0, scaleLabel: { display: !0 } }], yAxes: [{ display: !0, scaleLabel: { display: !0, labelString: "Value" }, ticks: { suggestedMin: -10, suggestedMax: 200 } }] } } }; window.onload = function () { var n = document.getElementById("canvas").getContext("2d"); window.myLine = new Chart(n, i) }; document.getElementById("randomizeData").addEventListener("click", function () { for (var i = 0, r = n.length; i < r; ++i)n[i] = Math.random() < .05 ? NaN : t(); window.myLine.update() }) }, initCharts_Line_LineStyles: function () { var n = { type: "line", data: { labels: ["January", "February", "March", "April", "May", "June", "July"], datasets: [{ label: "Unfilled", fill: !1, backgroundColor: window.chartColors.blue, borderColor: window.chartColors.blue, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }, { label: "Dashed", fill: !1, backgroundColor: window.chartColors.green, borderColor: window.chartColors.green, borderDash: [5, 5], data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }, { label: "Filled", backgroundColor: window.chartColors.red, borderColor: window.chartColors.red, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()], fill: !0 }] }, options: { maintainAspectRatio: !1, responsive: !0, title: { display: !0, text: "Chart.js Line Chart" }, tooltips: { mode: "index", intersect: !1 }, hover: { mode: "nearest", intersect: !0 }, scales: { xAxes: [{ display: !0, scaleLabel: { display: !0, labelString: "Month" } }], yAxes: [{ display: !0, scaleLabel: { display: !0, labelString: "Value" } }] } } }; window.onload = function () { var t = document.getElementById("canvas").getContext("2d"); window.myLine = new Chart(t, n) } }, initCharts_Line_MultiAxis: function () { var n = { labels: ["January", "February", "March", "April", "May", "June", "July"], datasets: [{ label: "My First dataset", borderColor: window.chartColors.red, backgroundColor: window.chartColors.red, fill: !1, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()], yAxisID: "y-axis-1" }, { label: "My Second dataset", borderColor: window.chartColors.blue, backgroundColor: window.chartColors.blue, fill: !1, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()], yAxisID: "y-axis-2" }] }; window.onload = function () { var t = document.getElementById("canvas").getContext("2d"); window.myLine = Chart.Line(t, { data: n, options: { maintainAspectRatio: !1, responsive: !0, hoverMode: "index", stacked: !1, title: { display: !0, text: "Chart.js Line Chart - Multi Axis" }, scales: { yAxes: [{ type: "linear", display: !0, position: "left", id: "y-axis-1" }, { type: "linear", display: !0, position: "right", id: "y-axis-2", gridLines: { drawOnChartArea: !1 } }] } } }) }; document.getElementById("randomizeData").addEventListener("click", function () { n.datasets.forEach(function (n) { n.data = n.data.map(function () { return randomScalingFactor() }) }); window.myLine.update() }) }, initCharts_Line_PointSizes: function () { var n = { type: "line", data: { labels: ["January", "February", "March", "April", "May", "June", "July"], datasets: [{ label: "dataset - big points", data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()], backgroundColor: window.chartColors.red, borderColor: window.chartColors.red, fill: !1, borderDash: [5, 5], pointRadius: 15, pointHoverRadius: 10 }, { label: "dataset - individual point sizes", data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()], backgroundColor: window.chartColors.blue, borderColor: window.chartColors.blue, fill: !1, borderDash: [5, 5], pointRadius: [2, 4, 6, 18, 0, 12, 20] }, { label: "dataset - large pointHoverRadius", data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()], backgroundColor: window.chartColors.green, borderColor: window.chartColors.green, fill: !1, pointHoverRadius: 30 }, { label: "dataset - large pointHitRadius", data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()], backgroundColor: window.chartColors.yellow, borderColor: window.chartColors.yellow, fill: !1, pointHitRadius: 20 }] }, options: { maintainAspectRatio: !1, responsive: !0, legend: { position: "bottom" }, hover: { mode: "index" }, scales: { xAxes: [{ display: !0, scaleLabel: { display: !0, labelString: "Month" } }], yAxes: [{ display: !0, scaleLabel: { display: !0, labelString: "Value" } }] }, title: { display: !0, text: "Chart.js Line Chart - Different point sizes" } } }; window.onload = function () { var t = document.getElementById("canvas").getContext("2d"); window.myLine = new Chart(t, n) } }, initCharts_Line_PointStyles: function () { function n(n) { return { type: "line", data: { labels: ["January", "February", "March", "April", "May", "June", "July"], datasets: [{ label: "My First dataset", backgroundColor: window.chartColors.red, borderColor: window.chartColors.red, data: [10, 23, 5, 99, 67, 43, 0], fill: !1, pointRadius: 10, pointHoverRadius: 15, showLine: !1 }] }, options: { maintainAspectRatio: !1, responsive: !0, title: { display: !0, text: "Point Style: " + n }, legend: { display: !1 }, elements: { point: { pointStyle: n } } } } } window.onload = function () { var t = document.querySelector("#pointStyle");["circle", "triangle", "rect", "rectRounded", "rectRot", "cross", "crossRot", "star", "line", "dash"].forEach(function (i) { var r = document.createElement("div"), u, f, e; r.classList.add("chart-container"); u = document.createElement("canvas"); r.appendChild(u); t.appendChild(r); f = u.getContext("2d"); e = n(i); new Chart(f, e) }) } }, initCharts_Line_Stepped: function () { function n(n, t) { return { type: "line", data: { labels: ["Day 1", "Day 2", "Day 3", "Day 4", "Day 5", "Day 6"], datasets: [{ label: "steppedLine: " + n.steppedLine, steppedLine: n.steppedLine, data: t, borderColor: n.color, fill: !1 }] }, options: { maintainAspectRatio: !1, responsive: !0, title: { display: !0, text: n.label } } } } window.onload = function () { var t = document.querySelector("#stepped"), i = [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()], r = [{ steppedLine: !1, label: "No Step Interpolation", color: window.chartColors.red }, { steppedLine: !0, label: "Step Before Interpolation", color: window.chartColors.green }, { steppedLine: "before", label: "Step Before Interpolation", color: window.chartColors.green }, { steppedLine: "after", label: "Step After Interpolation", color: window.chartColors.purple }]; r.forEach(function (r) { var u = document.createElement("div"), f, e, o; u.classList.add("chart-container"); f = document.createElement("canvas"); u.appendChild(f); t.appendChild(u); e = f.getContext("2d"); o = n(r, i); new Chart(e, o) }) } }, initCharts_Area_Boundaries: function () { function u(n) { return t.numbers(Chart.helpers.merge(r, n || {})) } function f(n) { return t.months(Chart.helpers.merge({ count: r.count, section: 3 }, n || {})) } function o(n) { var t = n.classList.toggle("btn-on"); Chart.helpers.each(Chart.instances, function (n) { n.options.elements.line.tension = t ? .4 : 1e-6; n.update() }) } function s() { var n = t.rand(); Chart.helpers.each(Chart.instances, function (i) { t.srand(n); i.data.datasets.forEach(function (n) { n.data = u() }); i.update() }) } var i = window.chartColors, t = Samples.utils, r = { min: -100, max: 100, count: 8, decimals: 2, continuity: 1 }, e = { maintainAspectRatio: !1, spanGaps: !1, elements: { line: { tension: 1e-6 } }, plugins: { filler: { propagate: !1 } }, scales: { xAxes: [{ ticks: { autoSkip: !1, maxRotation: 0 } }] } };[!1, "origin", "start", "end"].forEach(function (n, r) { t.srand(8); new Chart("chart-" + r, { type: "line", data: { labels: f(), datasets: [{ backgroundColor: t.transparentize(i.red), borderColor: i.red, data: u(), label: "Dataset", fill: n }] }, options: Chart.helpers.merge(e, { title: { text: "fill: " + n, display: !0 } }) }) }); n("#mi_toggle_smooth").click(function () { o(this) }); n("#mi_ramdomize").click(function () { s(this) }) }, initCharts_Area_Datasets: function () { function r() { return i.numbers(f) } function e() { return i.months({ count: f.count }) } function s(n) { var t = n.classList.toggle("btn-on"); u.options.plugins.filler.propagate = t; u.update() } function h(n) { var t = n.classList.toggle("btn-on"); u.options.elements.line.tension = t ? .4 : 1e-6; u.update() } function c() { u.data.datasets.forEach(function (n) { n.data = r() }); u.update() } var t = window.chartColors, i = Samples.utils, f = { min: 20, max: 80, count: 8, decimals: 2, continuity: 1 }; i.srand(42); var o = { labels: e(), datasets: [{ backgroundColor: i.transparentize(t.red), borderColor: t.red, data: r(), hidden: !0, label: "D0" }, { backgroundColor: i.transparentize(t.orange), borderColor: t.orange, data: r(), label: "D1", fill: "-1" }, { backgroundColor: i.transparentize(t.yellow), borderColor: t.yellow, data: r(), hidden: !0, label: "D2", fill: 1 }, { backgroundColor: i.transparentize(t.green), borderColor: t.green, data: r(), label: "D3", fill: "-1" }, { backgroundColor: i.transparentize(t.blue), borderColor: t.blue, data: r(), label: "D4", fill: "-1" }, { backgroundColor: i.transparentize(t.grey), borderColor: t.grey, data: r(), label: "D5", fill: "+2" }, { backgroundColor: i.transparentize(t.purple), borderColor: t.purple, data: r(), label: "D6", fill: !1 }, { backgroundColor: i.transparentize(t.red), borderColor: t.red, data: r(), label: "D7", fill: 8 }, { backgroundColor: i.transparentize(t.orange), borderColor: t.orange, data: r(), hidden: !0, label: "D8", fill: "end" }] }, u = new Chart("chart-0", { type: "line", data: o, options: { maintainAspectRatio: !1, spanGaps: !1, elements: { line: { tension: 1e-6 } }, scales: { yAxes: [{ stacked: !0 }] }, plugins: { filler: { propagate: !1 } } } }); n("#mi_toggle_propagate").click(function () { s(this) }); n("#mi_toggle_smooth").click(function () { h(this) }); n("#mi_randomize").click(function () { c() }) }, initCharts_Area_Stacked: function () { var i = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], n = { type: "line", data: { labels: ["January", "February", "March", "April", "May", "June", "July"], datasets: [{ label: "My First dataset", borderColor: window.chartColors.red, backgroundColor: window.chartColors.red, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }, { label: "My Second dataset", borderColor: window.chartColors.blue, backgroundColor: window.chartColors.blue, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }, { label: "My Third dataset", borderColor: window.chartColors.green, backgroundColor: window.chartColors.green, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }, { label: "My Third dataset", borderColor: window.chartColors.yellow, backgroundColor: window.chartColors.yellow, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }] }, options: { maintainAspectRatio: !1, responsive: !0, title: { display: !0, text: "Chart.js Line Chart - Stacked Area" }, tooltips: { mode: "index" }, hover: { mode: "index" }, scales: { xAxes: [{ scaleLabel: { display: !0, labelString: "Month" } }], yAxes: [{ stacked: !0, scaleLabel: { display: !0, labelString: "Value" } }] } } }, t; window.onload = function () { var t = document.getElementById("canvas").getContext("2d"); window.myLine = new Chart(t, n) }; document.getElementById("randomizeData").addEventListener("click", function () { n.data.datasets.forEach(function (n) { n.data = n.data.map(function () { return randomScalingFactor() }) }); window.myLine.update() }); t = Object.keys(window.chartColors); document.getElementById("addDataset").addEventListener("click", function () { for (var f = t[n.data.datasets.length % t.length], i = window.chartColors[f], r = { label: "Dataset " + n.data.datasets.length, borderColor: i, backgroundColor: i, data: [] }, u = 0; u < n.data.labels.length; ++u)r.data.push(randomScalingFactor()); n.data.datasets.push(r); window.myLine.update() }); document.getElementById("addData").addEventListener("click", function () { if (n.data.datasets.length > 0) { var t = i[n.data.labels.length % i.length]; n.data.labels.push(t); n.data.datasets.forEach(function (n) { n.data.push(randomScalingFactor()) }); window.myLine.update() } }); document.getElementById("removeDataset").addEventListener("click", function () { n.data.datasets.splice(0, 1); window.myLine.update() }); document.getElementById("removeData").addEventListener("click", function () { n.data.labels.splice(-1, 1); n.data.datasets.forEach(function (n) { n.data.pop() }); window.myLine.update() }) }, initCharts_Area_Radar: function () { function r() { var n = i.numbers(f); return f.from = n, n } function e() { return i.months({ count: f.count }) } function s(n) { var t = n.classList.toggle("btn-on"); u.options.plugins.filler.propagate = t; u.update() } function h(n) { var t = n.classList.toggle("btn-on"); u.options.elements.line.tension = t ? .4 : 1e-6; u.update() } function c() { u.data.datasets.forEach(function (n) { n.data = r() }); u.update() } var t = window.chartColors, i = Samples.utils, f = { min: 8, max: 16, count: 8, decimals: 2, continuity: 1 }; i.srand(42); var o = { labels: e(), datasets: [{ backgroundColor: i.transparentize(t.red), borderColor: t.red, data: r(), label: "D0" }, { backgroundColor: i.transparentize(t.orange), borderColor: t.orange, data: r(), hidden: !0, label: "D1", fill: "-1" }, { backgroundColor: i.transparentize(t.yellow), borderColor: t.yellow, data: r(), label: "D2", fill: 1 }, { backgroundColor: i.transparentize(t.green), borderColor: t.green, data: r(), label: "D3", fill: !1 }, { backgroundColor: i.transparentize(t.blue), borderColor: t.blue, data: r(), label: "D4", fill: "-1" }, { backgroundColor: i.transparentize(t.purple), borderColor: t.purple, data: r(), label: "D5", fill: "-1" }] }, u = new Chart("chart-0", { type: "radar", data: o, options: { maintainAspectRatio: !1, spanGaps: !1, elements: { line: { tension: 1e-6 } }, plugins: { filler: { propagate: !1 }, "samples-filler-analyser": { target: "chart-analyser" } } } }); n("#mi_toggle_propagate").click(function () { s(this) }); n("#mi_toggle_smooth").click(function () { h(this) }); n("#mi_randomize").click(function () { c() }) }, initCharts_Other_Scatter: function () { var n = Chart.helpers.color, t = { datasets: [{ label: "My First dataset", borderColor: window.chartColors.red, backgroundColor: n(window.chartColors.red).alpha(.2).rgbString(), data: [{ x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }] }, { label: "My Second dataset", borderColor: window.chartColors.blue, backgroundColor: n(window.chartColors.blue).alpha(.2).rgbString(), data: [{ x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }] }] }; window.onload = function () { var n = document.getElementById("canvas").getContext("2d"); window.myScatter = Chart.Scatter(n, { data: t, options: { maintainAspectRatio: !1, title: { display: !0, text: "Chart.js Scatter Chart" } } }) }; document.getElementById("randomizeData").addEventListener("click", function () { t.datasets.forEach(function (n) { n.data = n.data.map(function () { return { x: randomScalingFactor(), y: randomScalingFactor() } }) }); window.myScatter.update() }) }, initCharts_Other_ScatterMultiAxis: function () { var n = Chart.helpers.color, t = { datasets: [{ label: "My First dataset", xAxisID: "x-axis-1", yAxisID: "y-axis-1", borderColor: window.chartColors.red, backgroundColor: n(window.chartColors.red).alpha(.2).rgbString(), data: [{ x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }] }, { label: "My Second dataset", xAxisID: "x-axis-1", yAxisID: "y-axis-2", borderColor: window.chartColors.blue, backgroundColor: n(window.chartColors.blue).alpha(.2).rgbString(), data: [{ x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }, { x: randomScalingFactor(), y: randomScalingFactor() }] }] }; window.onload = function () { var n = document.getElementById("canvas").getContext("2d"); window.myScatter = Chart.Scatter(n, { data: t, options: { maintainAspectRatio: !1, responsive: !0, hoverMode: "nearest", intersect: !0, title: { display: !0, text: "Chart.js Scatter Chart - Multi Axis" }, scales: { xAxes: [{ position: "bottom", gridLines: { zeroLineColor: "rgba(0,0,0,1)" } }], yAxes: [{ type: "linear", display: !0, position: "left", id: "y-axis-1" }, { type: "linear", display: !0, position: "right", reverse: !0, id: "y-axis-2", gridLines: { drawOnChartArea: !1 } }] } } }) }; document.getElementById("randomizeData").addEventListener("click", function () { t.datasets.forEach(function (n) { n.data = n.data.map(function () { return { x: randomScalingFactor(), y: randomScalingFactor() } }) }); window.myScatter.update() }) }, initCharts_Other_Doughnut: function () { var t = function () { return Math.round(Math.random() * 100) }, n = { type: "doughnut", data: { datasets: [{ data: [t(), t(), t(), t(), t(),], backgroundColor: [window.chartColors.red, window.chartColors.orange, window.chartColors.yellow, window.chartColors.green, window.chartColors.blue,], label: "Dataset 1" }], labels: ["Red", "Orange", "Yellow", "Green", "Blue"] }, options: { maintainAspectRatio: !1, responsive: !0, legend: { position: "top" }, title: { display: !0, text: "Chart.js Doughnut Chart" }, animation: { animateScale: !0, animateRotate: !0 } } }, i; window.onload = function () { var t = document.getElementById("canvas").getContext("2d"); window.myDoughnut = new Chart(t, n) }; document.getElementById("randomizeData").addEventListener("click", function () { n.data.datasets.forEach(function (n) { n.data = n.data.map(function () { return t() }) }); window.myDoughnut.update() }); i = Object.keys(window.chartColors); document.getElementById("addDataset").addEventListener("click", function () { for (var f, e, r = { backgroundColor: [], data: [], label: "New dataset " + n.data.datasets.length }, u = 0; u < n.data.labels.length; ++u)r.data.push(t()), f = i[u % i.length], e = window.chartColors[f], r.backgroundColor.push(e); n.data.datasets.push(r); window.myDoughnut.update() }); document.getElementById("addData").addEventListener("click", function () { if (n.data.datasets.length > 0) { n.data.labels.push("data #" + n.data.labels.length); var r = i[n.data.datasets[0].data.length % i.length], u = window.chartColors[r]; n.data.datasets.forEach(function (n) { n.data.push(t()); n.backgroundColor.push(u) }); window.myDoughnut.update() } }); document.getElementById("removeDataset").addEventListener("click", function () { n.data.datasets.splice(0, 1); window.myDoughnut.update() }); document.getElementById("removeData").addEventListener("click", function () { n.data.labels.splice(-1, 1); n.data.datasets.forEach(function (n) { n.data.pop(); n.backgroundColor.pop() }); window.myDoughnut.update() }) }, initCharts_Other_Pie: function () { var n = function () { return Math.round(Math.random() * 100) }, t = { type: "pie", data: { datasets: [{ data: [n(), n(), n(), n(), n(),], backgroundColor: [window.chartColors.red, window.chartColors.orange, window.chartColors.yellow, window.chartColors.green, window.chartColors.blue,], label: "Dataset 1" }], labels: ["Red", "Orange", "Yellow", "Green", "Blue"] }, options: { responsive: !0, maintainAspectRatio: !1 } }, i; window.onload = function () { var n = document.getElementById("canvas").getContext("2d"); window.myPie = new Chart(n, t) }; document.getElementById("randomizeData").addEventListener("click", function () { t.data.datasets.forEach(function (t) { t.data = t.data.map(function () { return n() }) }); window.myPie.update() }); i = Object.keys(window.chartColors); document.getElementById("addDataset").addEventListener("click", function () { for (var f, e, r = { backgroundColor: [], data: [], label: "New dataset " + t.data.datasets.length }, u = 0; u < t.data.labels.length; ++u)r.data.push(n()), f = i[u % i.length], e = window.chartColors[f], r.backgroundColor.push(e); t.data.datasets.push(r); window.myPie.update() }); document.getElementById("removeDataset").addEventListener("click", function () { t.data.datasets.splice(0, 1); window.myPie.update() }) }, initCharts_Other_PolarArea: function () { var t = function () { return Math.round(Math.random() * 100) }, i = window.chartColors, r = Chart.helpers.color, n = { data: { datasets: [{ data: [t(), t(), t(), t(), t(),], backgroundColor: [r(i.red).alpha(.5).rgbString(), r(i.orange).alpha(.5).rgbString(), r(i.yellow).alpha(.5).rgbString(), r(i.green).alpha(.5).rgbString(), r(i.blue).alpha(.5).rgbString(),], label: "My dataset" }], labels: ["Red", "Orange", "Yellow", "Green", "Blue"] }, options: { maintainAspectRatio: !1, responsive: !0, legend: { position: "right" }, title: { display: !0, text: "Chart.js Polar Area Chart" }, scale: { ticks: { beginAtZero: !0 }, reverse: !1 }, animation: { animateRotate: !1, animateScale: !0 } } }, u; window.onload = function () { var t = document.getElementById("canvas"); window.myPolarArea = Chart.PolarArea(t, n) }; document.getElementById("randomizeData").addEventListener("click", function () { n.data.datasets.forEach(function (i, r) { i.data.forEach(function (i, u) { n.data.datasets[r].data[u] = t() }) }); window.myPolarArea.update() }); u = Object.keys(window.chartColors); document.getElementById("addData").addEventListener("click", function () { n.data.datasets.length > 0 && (n.data.labels.push("data #" + n.data.labels.length), n.data.datasets.forEach(function (i) { var r = u[n.data.labels.length % u.length]; i.backgroundColor.push(window.chartColors[r]); i.data.push(t()) }), window.myPolarArea.update()) }); document.getElementById("removeData").addEventListener("click", function () { n.data.labels.pop(); n.data.datasets.forEach(function (n) { n.backgroundColor.pop(); n.data.pop() }); window.myPolarArea.update() }) }, initCharts_Other_Radar: function () { var n = function () { return Math.round(Math.random() * 100) }, i = Chart.helpers.color, t = { type: "radar", data: { labels: [["Eating", "Dinner"], ["Drinking", "Water"], "Sleeping", ["Designing", "Graphics"], "Coding", "Cycling", "Running"], datasets: [{ label: "My First dataset", backgroundColor: i(window.chartColors.red).alpha(.2).rgbString(), borderColor: window.chartColors.red, pointBackgroundColor: window.chartColors.red, data: [n(), n(), n(), n(), n(), n(), n()] }, { label: "My Second dataset", backgroundColor: i(window.chartColors.blue).alpha(.2).rgbString(), borderColor: window.chartColors.blue, pointBackgroundColor: window.chartColors.blue, data: [n(), n(), n(), n(), n(), n(), n()] }] }, options: { maintainAspectRatio: !1, legend: { position: "top" }, title: { display: !0, text: "Chart.js Radar Chart" }, scale: { ticks: { beginAtZero: !0 } } } }, r; window.onload = function () { window.myRadar = new Chart(document.getElementById("canvas"), t) }; document.getElementById("randomizeData").addEventListener("click", function () { t.data.datasets.forEach(function (t) { t.data = t.data.map(function () { return n() }) }); window.myRadar.update() }); r = Object.keys(window.chartColors); document.getElementById("addDataset").addEventListener("click", function () { for (var o = r[t.data.datasets.length % r.length], u = window.chartColors[o], f = { label: "Dataset " + t.data.datasets.length, borderColor: u, backgroundColor: i(u).alpha(.2).rgbString(), pointBorderColor: u, data: [] }, e = 0; e < t.data.labels.length; ++e)f.data.push(n()); t.data.datasets.push(f); window.myRadar.update() }); document.getElementById("addData").addEventListener("click", function () { t.data.datasets.length > 0 && (t.data.labels.push("dataset #" + t.data.labels.length), t.data.datasets.forEach(function (t) { t.data.push(n()) }), window.myRadar.update()) }); document.getElementById("removeDataset").addEventListener("click", function () { t.data.datasets.splice(0, 1); window.myRadar.update() }); document.getElementById("removeData").addEventListener("click", function () { t.data.labels.pop(); t.data.datasets.forEach(function (n) { n.data.pop() }); window.myRadar.update() }) }, initCharts_Other_ComboBarLine: function () { var n = { labels: ["January", "February", "March", "April", "May", "June", "July"], datasets: [{ type: "line", label: "Dataset 1", borderColor: window.chartColors.blue, borderWidth: 2, fill: !1, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }, { type: "bar", label: "Dataset 2", backgroundColor: window.chartColors.red, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()], borderColor: "white", borderWidth: 2 }, { type: "bar", label: "Dataset 3", backgroundColor: window.chartColors.green, data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()] }] }; window.onload = function () { var t = document.getElementById("canvas").getContext("2d"); window.myMixedChart = new Chart(t, { type: "bar", data: n, options: { maintainAspectRatio: !1, responsive: !0, title: { display: !0, text: "Chart.js Combo Bar Line Chart" }, tooltips: { mode: "index", intersect: !0 } } }) }; document.getElementById("randomizeData").addEventListener("click", function () { n.datasets.forEach(function (n) { n.data = n.data.map(function () { return randomScalingFactor() }) }); window.myMixedChart.update() }) }, initComponents_MaterialIcons: function () { n("#iconList").searchable({ searchField: "#searchIcons", selector: ".mi-icon-item", childSelector: "span", show: function (n) { n.fadeIn() }, hide: function (n) { n.fadeOut() } }); n("#searchIcons").on("keyup", function () { n("#searchIcons").val() != "" ? n("#iconList h3").fadeOut() : n("#iconList h3").fadeIn() }) }, initQrcodeBarcode_Barcode: function () { JsBarcode("#code128", "Materionic"); JsBarcode("#ean-13", "1234567890128", { format: "ean13" }); JsBarcode("#ean-8", "12345670", { format: "ean8" }); JsBarcode("#ean-5", "12345", { format: "ean5" }); JsBarcode("#ean-2", "12", { format: "ean2" }); JsBarcode("#upc-a", "123456789012", { format: "upc" }); JsBarcode("#code39", "Hello", { format: "code39" }); JsBarcode("#itf-14", "1234567890123", { format: "itf14" }); JsBarcode("#msi", "123456", { format: "msi" }); JsBarcode("#pharmacode", "12345", { format: "pharmacode" }) }, initQrcodeBarcode_Qrcode: function () { function t() { var n = document.getElementById("text"); i.makeCode(n.value) } var i = new QRCode(document.getElementById("qrcode"), { width: 100, height: 100 }); t(); n("#text").on("blur", function () { t() }).on("keydown", function (n) { n.keyCode == 13 && t() }) }, initGauges_LinearGauges: function () { function i() { document.gauges.forEach(function (n) { t.push(setInterval(function () { n.value = Math.random() * (n.options.maxValue - n.options.minValue) + n.options.minValue }, n.animation.duration + 50)) }) } function r() { t.forEach(function (n) { clearInterval(n) }) } Array.prototype.forEach || (Array.prototype.forEach = function (n) { for (var t = 0, i = this.length; t < i; t++)n && n(this[t], t, this) }); document.fonts && document.fonts.forEach(function (n) { n.loaded.then(function () { n.family.match(/Led/) && document.gauges.forEach(function (n) { n.update(); n.options.renderTo.style.visibility = "visible" }) }) }); var t = []; n("#mi_animate_gauges").click(function () { i() }); n("#mi_stop_animate_gauges").click(function () { r() }) }, initGauges_RadialGauges: function () { function i() { document.gauges.forEach(function (n) { t.push(setInterval(function () { n.value = Math.random() * (n.options.maxValue - n.options.minValue) + n.options.minValue }, n.animation.duration + 50)) }) } function r() { t.forEach(function (n) { clearInterval(n) }) } Array.prototype.forEach || (Array.prototype.forEach = function (n) { for (var t = 0, i = this.length; t < i; t++)n && n(this[t], t, this) }); document.fonts && document.fonts.forEach(function (n) { n.loaded.then(function () { n.family.match(/Led/) && document.gauges.forEach(function (n) { n.update(); n.options.renderTo.style.visibility = "visible" }) }) }); var t = []; n("#mi_animate_gauges").click(function () { i() }); n("#mi_stop_animate_gauges").click(function () { r() }) }, initSnippets_Profile: function () { (function (n, t, i) { var r, u = n.getElementsByTagName(t)[0]; n.getElementById(i) || (r = n.createElement(t), r.id = i, r.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.4", u.parentNode.insertBefore(r, u)) })(document, "script", "facebook-jssdk"); n("#gallery").lightGallery({ thumbnail: !0, selector: "#gallery [data-src]" }); n("#basicLightGallery").lightGallery({ thumbnail: !0, selector: "#basicLightGallery a" }); n("#customizeCommentBox").lightGallery({ selector: "#customizeCommentBox a", addClass: "fb-comments", appendSubHtmlTo: ".lg-item", mode: "lg-fade", download: !1, thumbnail: !1 }); var t = n("#basicCommentBox"); t.lightGallery({ selector: "#basicCommentBox a", addClass: "fb-comments", appendSubHtmlTo: ".lg-item", mode: "lg-fade", download: !1, thumbnail: !1 }); t.on("onAfterSlide.lg", function (t, i, r) { if (!n(".lg-outer .lg-item").eq(r).attr("data-fb")) try { n(".lg-outer .lg-item").eq(r).attr("data-fb", "loaded"); FB.XFBML.parse() } catch (u) { n(window).on("fbAsyncInit", function () { n(".lg-outer .lg-item").eq(r).attr("data-fb", "loaded"); FB.XFBML.parse() }) } }); autosize(n("textarea.mi-auto-size")) }, initSnippets_Search: function () { var t = new kendo.data.DataSource({ transport: { read: { dataType: "json", url: "../../assets/data/kendo_ui_core_remote_data.json" } }, pageSize: 6 }); n("#pager").kendoPager({ dataSource: t }); n("#listView").kendoListView({ dataSource: t, template: '<div class="col-md-12">  <div class="media mi-media-search">    <div class="media-body">       <a href="javascript:void(0)" class="col-indigo"> #: data.CustomerName #       <\/a><span class="col-teal" style="font-size: 14px;">http://example.com<\/span>  <p>Cum sociis natoque penatibus et magnis dis #: data.CustomerName # parturient montes, nascetur #: data.Title # ridiculus mus.<\/p>   <\/div><\/div><\/div>' }) }, initSnippets_Faq: function () { n("#faqList").searchable({ searchField: "#searchFAQ", selector: ".panel-group", childSelector: "a", show: function (n) { n.slideDown(100) }, hide: function (n) { n.slideUp(100) } }) } }; var f = null; n(document).ready(function () { try { n("head > title").text((n(".mi-menu-item-open.active > a").text() + " | " + n("head > title").text()).trim().replace(/\s\s+/g, " ")) } catch (t) { } }) })(jQuery);